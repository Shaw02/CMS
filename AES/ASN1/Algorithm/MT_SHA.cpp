#include "StdAfx.h"
#include "MT_SHA.h"

//==============================================================
//			コンストラクタ
//--------------------------------------------------------------
//	●引数
//			無し
//	●返値
//			無し
//==============================================================
MT_SHA::MT_SHA(unsigned long init_key[], unsigned int key_length, SHA256* _cSHA):
	cSHA(_cSHA),
	MT(init_key, key_length)
{
}
//==============================================================
//			デストラクタ
//--------------------------------------------------------------
//	●引数
//			無し
//	●返値
//			無し
//==============================================================
MT_SHA::~MT_SHA(void)
{
}

//==============================================================
//			ハッシュ値取得
//--------------------------------------------------------------
//	●引数
//			void *result	ハッシュ値を格納するアドレス（160bit）
//	●返値
//			無し
//==============================================================
void	MT_SHA::generate(void)
{
	unsigned	int	i = sizeof(cHashBuff)/sizeof(int);

	//MT乱数取得（64Byte分）
	do{
		i--;
		cHashBuff.i[i] = genrand_int32();
	} while(i);

	//乱数から、更にSHA-256ハッシュ値を得る。
	cSHA->init();
	cSHA->final(cHashBuff.c, SHA_BlockSize);
}
//==============================================================
//			ハッシュ値取得
//--------------------------------------------------------------
//	●引数
//			void *result	ハッシュ値を格納するアドレス（160bit）
//	●返値
//			無し
//==============================================================
void	MT_SHA::get256(void *result)
{
	generate();
	cSHA->getHash(result);
}
//==============================================================
//			ハッシュ値取得
//--------------------------------------------------------------
//	●引数
//			void *result	ハッシュ値を格納するアドレス（160bit）
//	●返値
//			無し
//==============================================================
__m128i	MT_SHA::get__m128i(void)
{
	generate();
	return(_mm_loadu_si128((__m128i *)&cSHA->H[0]));
}
