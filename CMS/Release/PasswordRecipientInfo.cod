; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\PKCS7\PasswordRecipientInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4PasswordRecipientInfo@@6B@			; PasswordRecipientInfo::`RTTI Complete Object Locator'
PUBLIC	??_R3PasswordRecipientInfo@@8			; PasswordRecipientInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PasswordRecipientInfo@@8			; PasswordRecipientInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PasswordRecipientInfo@@8		; PasswordRecipientInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPasswordRecipientInfo@@@8		; PasswordRecipientInfo `RTTI Type Descriptor'
PUBLIC	??_GEncryption@@QAEPAXI@Z			; Encryption::`scalar deleting destructor'
PUBLIC	??_GKeyDerivation@@QAEPAXI@Z			; KeyDerivation::`scalar deleting destructor'
PUBLIC	??_7PasswordRecipientInfo@@6B@			; PasswordRecipientInfo::`vftable'
;	COMDAT ??_7PasswordRecipientInfo@@6B@
CONST	SEGMENT
??_7PasswordRecipientInfo@@6B@ DD FLAT:??_R4PasswordRecipientInfo@@6B@ ; PasswordRecipientInfo::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
CONST	ENDS
;	COMDAT ??_R4PasswordRecipientInfo@@6B@
rdata$r	SEGMENT
??_R4PasswordRecipientInfo@@6B@ DD 00H			; PasswordRecipientInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPasswordRecipientInfo@@@8
	DD	FLAT:??_R3PasswordRecipientInfo@@8
rdata$r	ENDS
;	COMDAT ??_R3PasswordRecipientInfo@@8
rdata$r	SEGMENT
??_R3PasswordRecipientInfo@@8 DD 00H			; PasswordRecipientInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2PasswordRecipientInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2PasswordRecipientInfo@@8
rdata$r	SEGMENT
??_R2PasswordRecipientInfo@@8 DD FLAT:??_R1A@?0A@EA@PasswordRecipientInfo@@8 ; PasswordRecipientInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PasswordRecipientInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PasswordRecipientInfo@@8 DD FLAT:??_R0?AVPasswordRecipientInfo@@@8 ; PasswordRecipientInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PasswordRecipientInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPasswordRecipientInfo@@@8
_DATA	SEGMENT
??_R0?AVPasswordRecipientInfo@@@8 DD FLAT:??_7type_info@@6B@ ; PasswordRecipientInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPasswordRecipientInfo@@', 00H
PUBLIC	?GetKey@PasswordRecipientInfo@@QAEHPAXI0I@Z	; PasswordRecipientInfo::GetKey
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\pkcs7\passwordrecipientinfo.cpp
;	COMDAT ?GetKey@PasswordRecipientInfo@@QAEHPAXI0I@Z
_TEXT	SEGMENT
_ptPassword$ = 8					; size = 4
_szPassword$ = 12					; size = 4
_EK$ = 16						; size = 4
_szEK$ = 20						; size = 4
?GetKey@PasswordRecipientInfo@@QAEHPAXI0I@Z PROC	; PasswordRecipientInfo::GetKey, COMDAT
; _this$ = eax

; 107  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f0		 mov	 esi, eax

; 108  : 	//暗号鍵 for 鍵
; 109  : 	unsigned	int		szKEK;
; 110  : 	unsigned	char*	KEK;
; 111  : 	unsigned	int		szCEK;
; 112  : 
; 113  : 	//鍵暗号化鍵の導出
; 114  : 	szKEK = keyEncryptionAlgorithm->szKey;

  00004	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  0000a	8b 98 a4 00 00
	00		 mov	 ebx, DWORD PTR [eax+164]
  00010	57		 push	 edi

; 115  : 	KEK = new unsigned char [szKEK];

  00011	53		 push	 ebx
  00012	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 116  : 	keyDerivation->dkLen = szKEK;

  00017	8b 8e 8c 00 00
	00		 mov	 ecx, DWORD PTR [esi+140]
  0001d	8b f8		 mov	 edi, eax

; 117  : 	keyDerivation->calc(KEK, ptPassword, szPassword);

  0001f	8b 44 24 18	 mov	 eax, DWORD PTR _szPassword$[esp+12]
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	8b 44 24 14	 mov	 eax, DWORD PTR _ptPassword$[esp+12]
  0002b	89 99 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], ebx
  00031	8b 8e 8c 00 00
	00		 mov	 ecx, DWORD PTR [esi+140]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0003c	50		 push	 eax
  0003d	57		 push	 edi
  0003e	ff d2		 call	 edx

; 118  : 
; 119  : 	//暗号器に導出した鍵を設定
; 120  : 	keyEncryptionAlgorithm->Set_Key(KEK);

  00040	8b 8e f0 00 00
	00		 mov	 ecx, DWORD PTR [esi+240]
  00046	8b 01		 mov	 eax, DWORD PTR [ecx]
  00048	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004b	57		 push	 edi
  0004c	ff d2		 call	 edx

; 121  : 
; 122  : 	//コンテンツ暗号化鍵を鍵暗号化鍵でラップ
; 123  : 	szCEK = keyEncryptionAlgorithm->KeyUnWrap(EK,szEK);	//random

  0004e	8b 54 24 1c	 mov	 edx, DWORD PTR _szEK$[esp+8]
  00052	8b 8e f0 00 00
	00		 mov	 ecx, DWORD PTR [esi+240]
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0005d	52		 push	 edx
  0005e	8b 54 24 1c	 mov	 edx, DWORD PTR _EK$[esp+12]
  00062	52		 push	 edx
  00063	ff d0		 call	 eax

; 124  : 
; 125  : 	delete	KEK;

  00065	57		 push	 edi
  00066	8b f0		 mov	 esi, eax
  00068	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006d	83 c4 04	 add	 esp, 4
  00070	5f		 pop	 edi

; 126  : 
; 127  : 	return(szCEK);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 128  : }

  00075	c2 10 00	 ret	 16			; 00000010H
?GetKey@PasswordRecipientInfo@@QAEHPAXI0I@Z ENDP	; PasswordRecipientInfo::GetKey
; Function compile flags: /Ogtpy
;	COMDAT ??_GEncryption@@QAEPAXI@Z
_TEXT	SEGMENT
??_GEncryption@@QAEPAXI@Z PROC				; Encryption::`scalar deleting destructor', COMDAT
; _this$ = esi
  00000	57		 push	 edi
  00001	8d 7e 44	 lea	 edi, DWORD PTR [esi+68]
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AlgorithmIdentifier@@6B@
  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ObjectIdentifier@@6B@
  00010	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00013	85 c0		 test	 eax, eax
  00015	74 09		 je	 SHORT $LN17@scalar@20
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN17@scalar@20:
  00020	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00023	50		 push	 eax
  00024	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  0002b	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  00032	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
  00041	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00046	8b fe		 mov	 edi, esi
  00048	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sequence@@6B@
  0004e	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00059	83 c4 04	 add	 esp, 4
  0005c	8b c6		 mov	 eax, esi
  0005e	5f		 pop	 edi
  0005f	c3		 ret	 0
??_GEncryption@@QAEPAXI@Z ENDP				; Encryption::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GKeyDerivation@@QAEPAXI@Z
_TEXT	SEGMENT
??_GKeyDerivation@@QAEPAXI@Z PROC			; KeyDerivation::`scalar deleting destructor', COMDAT
; _this$ = esi
  00000	57		 push	 edi
  00001	8d 7e 44	 lea	 edi, DWORD PTR [esi+68]
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AlgorithmIdentifier@@6B@
  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ObjectIdentifier@@6B@
  00010	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00013	85 c0		 test	 eax, eax
  00015	74 09		 je	 SHORT $LN15@scalar@21
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN15@scalar@21:
  00020	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00023	50		 push	 eax
  00024	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  0002b	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  00032	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
  00041	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00046	8b fe		 mov	 edi, esi
  00048	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sequence@@6B@
  0004e	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00059	83 c4 04	 add	 esp, 4
  0005c	8b c6		 mov	 eax, esi
  0005e	5f		 pop	 edi
  0005f	c3		 ret	 0
??_GKeyDerivation@@QAEPAXI@Z ENDP			; KeyDerivation::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1PasswordRecipientInfo@@QAE@XZ		; PasswordRecipientInfo::~PasswordRecipientInfo
; Function compile flags: /Ogtpy
;	COMDAT ??1PasswordRecipientInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
??1PasswordRecipientInfo@@QAE@XZ PROC			; PasswordRecipientInfo::~PasswordRecipientInfo, COMDAT

; 28   : {

  00000	51		 push	 ecx
  00001	55		 push	 ebp
  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _this$[esp+4]
  00006	56		 push	 esi

; 29   : 	delete	keyDerivation;

  00007	8b b5 8c 00 00
	00		 mov	 esi, DWORD PTR [ebp+140]
  0000d	57		 push	 edi
  0000e	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7PasswordRecipientInfo@@6B@
  00015	85 f6		 test	 esi, esi
  00017	74 05		 je	 SHORT $LN3@PasswordRe
  00019	e8 00 00 00 00	 call	 ??_GKeyDerivation@@QAEPAXI@Z
$LN3@PasswordRe:

; 30   : 	delete	keyEncryptionAlgorithm;

  0001e	8b b5 f0 00 00
	00		 mov	 esi, DWORD PTR [ebp+240]
  00024	85 f6		 test	 esi, esi
  00026	74 05		 je	 SHORT $LN5@PasswordRe
  00028	e8 00 00 00 00	 call	 ??_GEncryption@@QAEPAXI@Z
$LN5@PasswordRe:

; 31   : }

  0002d	8d bd f4 00 00
	00		 lea	 edi, DWORD PTR [ebp+244]
  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  00039	83 7f 5c 10	 cmp	 DWORD PTR [edi+92], 16	; 00000010H
  0003d	72 0c		 jb	 SHORT $LN25@PasswordRe
  0003f	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
$LN25@PasswordRe:
  0004b	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  00052	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00059	c6 47 48 00	 mov	 BYTE PTR [edi+72], 0
  0005d	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00062	8d b5 90 00 00
	00		 lea	 esi, DWORD PTR [ebp+144]
  00068	e8 00 00 00 00	 call	 ??1Context@@QAE@XZ	; Context::~Context
  0006d	8d 7d 44	 lea	 edi, DWORD PTR [ebp+68]
  00070	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Integer@@6B@
  00076	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  0007b	8b fd		 mov	 edi, ebp
  0007d	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7Sequence@@6B@
  00084	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5d		 pop	 ebp
  0008c	59		 pop	 ecx
  0008d	c2 04 00	 ret	 4
??1PasswordRecipientInfo@@QAE@XZ ENDP			; PasswordRecipientInfo::~PasswordRecipientInfo
PUBLIC	?SetKey@PasswordRecipientInfo@@QAEXPAXI0I@Z	; PasswordRecipientInfo::SetKey
; Function compile flags: /Ogtpy
;	COMDAT ?SetKey@PasswordRecipientInfo@@QAEXPAXI0I@Z
_TEXT	SEGMENT
_ptPassword$ = 8					; size = 4
$T84221 = 12						; size = 4
_szPassword$ = 12					; size = 4
_CEK$ = 16						; size = 4
_szCEK$ = 20						; size = 4
?SetKey@PasswordRecipientInfo@@QAEXPAXI0I@Z PROC	; PasswordRecipientInfo::SetKey, COMDAT
; _this$ = esi

; 75   : {

  00000	51		 push	 ecx

; 76   : 	//暗号鍵 for 鍵
; 77   : 	unsigned	char*	KEK	= new unsigned char [keyEncryptionAlgorithm->szKey];

  00001	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00007	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0000d	53		 push	 ebx
  0000e	57		 push	 edi
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 78   : 	unsigned	int		szECEK;
; 79   : 
; 80   : 	//鍵暗号化鍵の導出
; 81   : 	keyDerivation->calc(KEK, ptPassword, szPassword);

  00015	8b 8e 8c 00 00
	00		 mov	 ecx, DWORD PTR [esi+140]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00020	8b d8		 mov	 ebx, eax
  00022	8b 44 24 18	 mov	 eax, DWORD PTR _szPassword$[esp+12]
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	8b 44 24 14	 mov	 eax, DWORD PTR _ptPassword$[esp+12]
  0002e	50		 push	 eax
  0002f	53		 push	 ebx
  00030	ff d2		 call	 edx

; 82   : 
; 83   : 	//暗号器に導出した鍵を設定
; 84   : 	keyEncryptionAlgorithm->Set_Key(KEK);

  00032	8b 8e f0 00 00
	00		 mov	 ecx, DWORD PTR [esi+240]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003d	53		 push	 ebx
  0003e	ff d2		 call	 edx

; 85   : 
; 86   : 	//コンテンツ暗号化鍵を鍵暗号化鍵でラップ
; 87   : 	szECEK = keyEncryptionAlgorithm->KeyWrap(CEK,szCEK);	//random

  00040	8b 54 24 1c	 mov	 edx, DWORD PTR _szCEK$[esp+8]
  00044	8b 8e f0 00 00
	00		 mov	 ecx, DWORD PTR [esi+240]
  0004a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004c	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  0004f	52		 push	 edx
  00050	8b 54 24 1c	 mov	 edx, DWORD PTR _CEK$[esp+12]
  00054	52		 push	 edx
  00055	ff d0		 call	 eax

; 88   : 
; 89   : 	//ラップした鍵をASN.1 BERへ。
; 90   : 	EncryptedKey.Set((char *)keyEncryptionAlgorithm->GetEncrptedKey(),szECEK);

  00057	8b 8e f0 00 00
	00		 mov	 ecx, DWORD PTR [esi+240]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	8b f8		 mov	 edi, eax
  00061	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00064	ff d0		 call	 eax
  00066	57		 push	 edi
  00067	50		 push	 eax
  00068	8d 8e 38 01 00
	00		 lea	 ecx, DWORD PTR [esi+312]
  0006e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 91   : 	Set_Construct(&EncryptedKey);

  00073	8d 54 24 14	 lea	 edx, DWORD PTR $T84221[esp+8]
  00077	8d 8e f4 00 00
	00		 lea	 ecx, DWORD PTR [esi+244]
  0007d	52		 push	 edx
  0007e	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
  00081	89 4c 24 18	 mov	 DWORD PTR $T84221[esp+12], ecx
  00085	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 92   : 
; 93   : 	delete	KEK;

  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00090	83 c4 04	 add	 esp, 4

; 94   : }

  00093	5f		 pop	 edi
  00094	5b		 pop	 ebx
  00095	59		 pop	 ecx
  00096	c2 10 00	 ret	 16			; 00000010H
?SetKey@PasswordRecipientInfo@@QAEXPAXI0I@Z ENDP	; PasswordRecipientInfo::SetKey
_TEXT	ENDS
PUBLIC	?SetInfo@PasswordRecipientInfo@@QAEXPAVKeyDerivation@@PAVEncryption@@@Z ; PasswordRecipientInfo::SetInfo
; Function compile flags: /Ogtpy
;	COMDAT ?SetInfo@PasswordRecipientInfo@@QAEXPAVKeyDerivation@@PAVEncryption@@@Z
_TEXT	SEGMENT
$T84243 = 8						; size = 4
$T84239 = 8						; size = 4
$T84235 = 8						; size = 4
$T84231 = 8						; size = 4
__keyDerivation$ = 8					; size = 4
__keyEncryption$ = 12					; size = 4
?SetInfo@PasswordRecipientInfo@@QAEXPAVKeyDerivation@@PAVEncryption@@@Z PROC ; PasswordRecipientInfo::SetInfo, COMDAT
; _this$ = esi

; 44   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __keyDerivation$[esp+4]
  00006	57		 push	 edi

; 45   : 
; 46   : 	//version CMSVersion,   -- Always set to 0
; 47   : 	version.Set(0);
; 48   : 	Set_Construct(&version);

  00007	8d 4c 24 10	 lea	 ecx, DWORD PTR $T84231[esp+8]
  0000b	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  0000e	8d 5e 28	 lea	 ebx, DWORD PTR [esi+40]
  00011	51		 push	 ecx
  00012	8b fb		 mov	 edi, ebx
  00014	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  0001e	89 44 24 14	 mov	 DWORD PTR $T84231[esp+12], eax
  00022	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 49   : 
; 50   : 	//keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,
; 51   : 	_keyDerivation->mode = _IMPLICIT;
; 52   : 	keyDerivation = _keyDerivation;
; 53   : 	keyDerivationAlgorithm.Set_Construct(keyDerivation);

  00027	8d 54 24 10	 lea	 edx, DWORD PTR $T84235[esp+8]
  0002b	c7 45 24 01 00
	00 00		 mov	 DWORD PTR [ebp+36], 1
  00032	52		 push	 edx
  00033	8d be b8 00 00
	00		 lea	 edi, DWORD PTR [esi+184]
  00039	89 ae 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ebp
  0003f	89 6c 24 14	 mov	 DWORD PTR $T84235[esp+12], ebp
  00043	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 54   : 	Set_Construct(&keyDerivationAlgorithm);

  00048	8d 4c 24 10	 lea	 ecx, DWORD PTR $T84239[esp+8]
  0004c	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  00052	51		 push	 ecx
  00053	8b fb		 mov	 edi, ebx
  00055	89 44 24 14	 mov	 DWORD PTR $T84239[esp+12], eax
  00059	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 55   : 
; 56   : 	//keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
; 57   : 	keyEncryptionAlgorithm = _keyEncryption;

  0005e	8b 44 24 14	 mov	 eax, DWORD PTR __keyEncryption$[esp+8]

; 58   : 	Set_Construct(keyEncryptionAlgorithm);

  00062	8d 54 24 10	 lea	 edx, DWORD PTR $T84243[esp+8]
  00066	52		 push	 edx
  00067	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  0006d	89 44 24 14	 mov	 DWORD PTR $T84243[esp+12], eax
  00071	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 59   : 
; 60   : 	//encryptedKey EncryptedKey }
; 61   : 	//SetKey()関数で処理する。
; 62   : }

  00076	5f		 pop	 edi
  00077	5d		 pop	 ebp
  00078	5b		 pop	 ebx
  00079	c2 08 00	 ret	 8
?SetInfo@PasswordRecipientInfo@@QAEXPAVKeyDerivation@@PAVEncryption@@@Z ENDP ; PasswordRecipientInfo::SetInfo
PUBLIC	??0PasswordRecipientInfo@@QAE@QBD@Z		; PasswordRecipientInfo::PasswordRecipientInfo
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0PasswordRecipientInfo@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PasswordRecipientInfo@@QAE@QBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0PasswordRecipientInfo@@QAE@QBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0PasswordRecipientInfo@@QAE@QBD@Z$2
__ehfuncinfo$??0PasswordRecipientInfo@@QAE@QBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0PasswordRecipientInfo@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\pkcs7\passwordrecipientinfo.cpp
xdata$x	ENDS
;	COMDAT ??0PasswordRecipientInfo@@QAE@QBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0PasswordRecipientInfo@@QAE@QBD@Z PROC		; PasswordRecipientInfo::PasswordRecipientInfo, COMDAT

; 15   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0PasswordRecipientInfo@@QAE@QBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 74 24 1c	 mov	 esi, DWORD PTR _this$[esp+20]
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CKLLNPFD@PasswordRecipientInfo?$AA@
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_07EDADKEAH@Integer?$AA@
  00036	8d 7e 44	 lea	 edi, DWORD PTR [esi+68]
  00039	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00041	57		 push	 edi
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PasswordRecipientInfo@@6B@
  00048	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  0004d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Integer@@6B@
  00053	6a 00		 push	 0
  00055	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  0005b	50		 push	 eax
  0005c	c6 44 24 1c 01	 mov	 BYTE PTR __$EHRec$[esp+40], 1
  00061	e8 00 00 00 00	 call	 ??0Context@@QAE@IQBD@Z	; Context::Context
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DHPBPBEA@Octet?5String?$AA@
  0006b	8d be f4 00 00
	00		 lea	 edi, DWORD PTR [esi+244]
  00071	57		 push	 edi
  00072	c6 44 24 1c 02	 mov	 BYTE PTR __$EHRec$[esp+40], 2
  00077	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  0007c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  00082	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  00089	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00090	c6 47 48 00	 mov	 BYTE PTR [edi+72], 0

; 16   : }

  00094	8b c6		 mov	 eax, esi
  00096	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PasswordRecipientInfo@@QAE@QBD@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1Sequence@@QAE@XZ	; Sequence::~Sequence
__unwindfunclet$??0PasswordRecipientInfo@@QAE@QBD@Z$1:
  00008	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  0000b	83 c0 44	 add	 eax, 68			; 00000044H
  0000e	e9 00 00 00 00	 jmp	 ??1Integer@@QAE@XZ	; Integer::~Integer
__unwindfunclet$??0PasswordRecipientInfo@@QAE@QBD@Z$2:
  00013	8b 75 04	 mov	 esi, DWORD PTR _this$[ebp-4]
  00016	81 c6 90 00 00
	00		 add	 esi, 144		; 00000090H
  0001c	e9 00 00 00 00	 jmp	 ??1Context@@QAE@XZ	; Context::~Context
__ehhandler$??0PasswordRecipientInfo@@QAE@QBD@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00028	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PasswordRecipientInfo@@QAE@QBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PasswordRecipientInfo@@QAE@QBD@Z ENDP		; PasswordRecipientInfo::PasswordRecipientInfo
END
