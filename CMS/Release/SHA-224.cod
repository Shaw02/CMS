; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\Algorithm\SHA-224.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?getHash@SHA224@@UAEXPAX@Z			; SHA224::getHash
PUBLIC	?init@SHA224@@UAEXXZ				; SHA224::init
PUBLIC	??_R4SHA224@@6B@				; SHA224::`RTTI Complete Object Locator'
PUBLIC	??_R3SHA224@@8					; SHA224::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SHA224@@8					; SHA224::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SHA256@@8				; SHA256::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3SHA256@@8					; SHA256::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SHA256@@8					; SHA256::`RTTI Base Class Array'
PUBLIC	??_R0?AVSHA256@@@8				; SHA256 `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@SHA224@@8				; SHA224::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSHA224@@@8				; SHA224 `RTTI Type Descriptor'
PUBLIC	?oid@SHA224@@2PAIA				; SHA224::oid
PUBLIC	??_7SHA224@@6B@					; SHA224::`vftable'
;	COMDAT ??_7SHA224@@6B@
CONST	SEGMENT
??_7SHA224@@6B@ DD FLAT:??_R4SHA224@@6B@		; SHA224::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
	DD	FLAT:?init@SHA224@@UAEXXZ
	DD	FLAT:?final@Digest@@UAEXPAXI@Z
	DD	FLAT:?getHash@SHA224@@UAEXPAX@Z
	DD	FLAT:?calc@SHA256@@UAEXPAX@Z
CONST	ENDS
;	COMDAT ??_R4SHA224@@6B@
rdata$r	SEGMENT
??_R4SHA224@@6B@ DD 00H					; SHA224::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSHA224@@@8
	DD	FLAT:??_R3SHA224@@8
rdata$r	ENDS
;	COMDAT ??_R3SHA224@@8
rdata$r	SEGMENT
??_R3SHA224@@8 DD 00H					; SHA224::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2SHA224@@8
rdata$r	ENDS
;	COMDAT ??_R2SHA224@@8
rdata$r	SEGMENT
??_R2SHA224@@8 DD FLAT:??_R1A@?0A@EA@SHA224@@8		; SHA224::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SHA256@@8
	DD	FLAT:??_R1A@?0A@EA@SHA@@8
	DD	FLAT:??_R1A@?0A@EA@Digest@@8
	DD	FLAT:??_R1A@?0A@EA@AlgorithmIdentifier@@8
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SHA256@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SHA256@@8 DD FLAT:??_R0?AVSHA256@@@8	; SHA256::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SHA256@@8
rdata$r	ENDS
;	COMDAT ??_R3SHA256@@8
rdata$r	SEGMENT
??_R3SHA256@@8 DD 00H					; SHA256::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2SHA256@@8
rdata$r	ENDS
;	COMDAT ??_R2SHA256@@8
rdata$r	SEGMENT
??_R2SHA256@@8 DD FLAT:??_R1A@?0A@EA@SHA256@@8		; SHA256::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SHA@@8
	DD	FLAT:??_R1A@?0A@EA@Digest@@8
	DD	FLAT:??_R1A@?0A@EA@AlgorithmIdentifier@@8
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSHA256@@@8
_DATA	SEGMENT
??_R0?AVSHA256@@@8 DD FLAT:??_7type_info@@6B@		; SHA256 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSHA256@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SHA224@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SHA224@@8 DD FLAT:??_R0?AVSHA224@@@8	; SHA224::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SHA224@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSHA224@@@8
_DATA	SEGMENT
??_R0?AVSHA224@@@8 DD FLAT:??_7type_info@@6B@		; SHA224 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSHA224@@', 00H
?oid@SHA224@@2PAIA DD 02H				; SHA224::oid
	DD	010H
	DD	0348H
	DD	01H
	DD	065H
	DD	03H
	DD	04H
	DD	02H
	DD	04H
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\algorithm\sha-224.cpp
;	COMDAT ?getHash@SHA224@@UAEXPAX@Z
_TEXT	SEGMENT
_result$ = 8						; size = 4
?getHash@SHA224@@UAEXPAX@Z PROC				; SHA224::getHash, COMDAT
; _this$ = ecx

; 77   : 				int*	ir	= (int *)result;
; 78   : 	unsigned	int		i	= 0;
; 79   : 	unsigned	int		n;
; 80   : 
; 81   : 	while(i < (sizeof(H)/sizeof(int))){
; 82   : 		//1Byteずつ処理していたら、メモリアクセスが多くなってCPU処理にペナルティが発生する。
; 83   : 		n		= H[i];

  00000	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00006	56		 push	 esi
  00007	57		 push	 edi

; 84   : 		ir[i]	= ((n>>24) & 0xFF) | ((n>>8) & 0xFF00) | ((n & 0xFF00)<<8) | ((n & 0xFF)<<24);

  00008	8b d0		 mov	 edx, eax
  0000a	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  00010	8b f0		 mov	 esi, eax
  00012	c1 ee 10	 shr	 esi, 16			; 00000010H
  00015	0b d6		 or	 edx, esi
  00017	c1 ea 08	 shr	 edx, 8
  0001a	8b f0		 mov	 esi, eax
  0001c	81 e6 00 ff 00
	00		 and	 esi, 65280		; 0000ff00H
  00022	c1 e0 10	 shl	 eax, 16			; 00000010H
  00025	0b f0		 or	 esi, eax
  00027	8b 44 24 0c	 mov	 eax, DWORD PTR _result$[esp+4]
  0002b	c1 e6 08	 shl	 esi, 8
  0002e	0b d6		 or	 edx, esi
  00030	89 10		 mov	 DWORD PTR [eax], edx
  00032	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00038	8b f2		 mov	 esi, edx
  0003a	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  00040	8b fa		 mov	 edi, edx
  00042	c1 ef 10	 shr	 edi, 16			; 00000010H
  00045	0b f7		 or	 esi, edi
  00047	c1 ee 08	 shr	 esi, 8
  0004a	8b fa		 mov	 edi, edx
  0004c	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  00052	c1 e2 10	 shl	 edx, 16			; 00000010H
  00055	0b fa		 or	 edi, edx
  00057	c1 e7 08	 shl	 edi, 8
  0005a	0b f7		 or	 esi, edi
  0005c	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0005f	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  00065	8b f2		 mov	 esi, edx
  00067	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  0006d	8b fa		 mov	 edi, edx
  0006f	c1 ef 10	 shr	 edi, 16			; 00000010H
  00072	0b f7		 or	 esi, edi
  00074	c1 ee 08	 shr	 esi, 8
  00077	8b fa		 mov	 edi, edx
  00079	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  0007f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00082	0b fa		 or	 edi, edx
  00084	c1 e7 08	 shl	 edi, 8
  00087	0b f7		 or	 esi, edi
  00089	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0008c	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00092	8b f2		 mov	 esi, edx
  00094	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  0009a	8b fa		 mov	 edi, edx
  0009c	c1 ef 10	 shr	 edi, 16			; 00000010H
  0009f	0b f7		 or	 esi, edi
  000a1	8b fa		 mov	 edi, edx
  000a3	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  000a9	c1 ee 08	 shr	 esi, 8
  000ac	c1 e2 10	 shl	 edx, 16			; 00000010H
  000af	0b fa		 or	 edi, edx
  000b1	c1 e7 08	 shl	 edi, 8
  000b4	0b f7		 or	 esi, edi
  000b6	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  000b9	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  000bf	8b f2		 mov	 esi, edx
  000c1	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  000c7	8b fa		 mov	 edi, edx
  000c9	c1 ef 10	 shr	 edi, 16			; 00000010H
  000cc	0b f7		 or	 esi, edi
  000ce	8b fa		 mov	 edi, edx
  000d0	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  000d6	c1 e2 10	 shl	 edx, 16			; 00000010H
  000d9	0b fa		 or	 edi, edx
  000db	c1 ee 08	 shr	 esi, 8
  000de	c1 e7 08	 shl	 edi, 8
  000e1	0b f7		 or	 esi, edi
  000e3	89 70 10	 mov	 DWORD PTR [eax+16], esi
  000e6	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  000ec	8b f2		 mov	 esi, edx
  000ee	8b fa		 mov	 edi, edx
  000f0	c1 ef 10	 shr	 edi, 16			; 00000010H
  000f3	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  000f9	0b f7		 or	 esi, edi
  000fb	c1 ee 08	 shr	 esi, 8
  000fe	8b fa		 mov	 edi, edx
  00100	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  00106	c1 e2 10	 shl	 edx, 16			; 00000010H
  00109	0b fa		 or	 edi, edx
  0010b	c1 e7 08	 shl	 edi, 8
  0010e	0b f7		 or	 esi, edi
  00110	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00113	8b 91 c8 00 00
	00		 mov	 edx, DWORD PTR [ecx+200]
  00119	8b f2		 mov	 esi, edx
  0011b	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  00121	8b fa		 mov	 edi, edx
  00123	c1 ef 10	 shr	 edi, 16			; 00000010H
  00126	0b f7		 or	 esi, edi
  00128	8b fa		 mov	 edi, edx
  0012a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0012d	c1 ee 08	 shr	 esi, 8
  00130	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  00136	0b fa		 or	 edi, edx
  00138	c1 e7 08	 shl	 edi, 8
  0013b	0b f7		 or	 esi, edi
  0013d	89 70 18	 mov	 DWORD PTR [eax+24], esi
  00140	8b 89 cc 00 00
	00		 mov	 ecx, DWORD PTR [ecx+204]
  00146	8b d1		 mov	 edx, ecx
  00148	8b f1		 mov	 esi, ecx
  0014a	c1 ee 10	 shr	 esi, 16			; 00000010H
  0014d	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  00153	0b d6		 or	 edx, esi
  00155	8b f1		 mov	 esi, ecx
  00157	81 e6 00 ff 00
	00		 and	 esi, 65280		; 0000ff00H
  0015d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00160	0b f1		 or	 esi, ecx
  00162	c1 e6 08	 shl	 esi, 8
  00165	c1 ea 08	 shr	 edx, 8
  00168	0b d6		 or	 edx, esi
  0016a	5f		 pop	 edi
  0016b	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  0016e	5e		 pop	 esi

; 85   : 		i++;
; 86   : 	}
; 87   : }

  0016f	c2 04 00	 ret	 4
?getHash@SHA224@@UAEXPAX@Z ENDP				; SHA224::getHash
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?init@SHA224@@UAEXXZ
_TEXT	SEGMENT
?init@SHA224@@UAEXXZ PROC				; SHA224::init, COMDAT
; _this$ = ecx

; 57   : 	iCountBlock = 0;

  00000	c7 81 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+160], 0

; 58   : 	H[0] = 0xC1059ED8;

  0000a	c7 81 b0 00 00
	00 d8 9e 05 c1	 mov	 DWORD PTR [ecx+176], -1056596264 ; c1059ed8H

; 59   : 	H[1] = 0x367CD507;

  00014	c7 81 b4 00 00
	00 07 d5 7c 36	 mov	 DWORD PTR [ecx+180], 914150663 ; 367cd507H

; 60   : 	H[2] = 0x3070DD17;

  0001e	c7 81 b8 00 00
	00 17 dd 70 30	 mov	 DWORD PTR [ecx+184], 812702999 ; 3070dd17H

; 61   : 	H[3] = 0xF70E5939;

  00028	c7 81 bc 00 00
	00 39 59 0e f7	 mov	 DWORD PTR [ecx+188], -150054599 ; f70e5939H

; 62   : 	H[4] = 0xFFC00B31;

  00032	c7 81 c0 00 00
	00 31 0b c0 ff	 mov	 DWORD PTR [ecx+192], -4191439 ; ffc00b31H

; 63   : 	H[5] = 0x68581511;

  0003c	c7 81 c4 00 00
	00 11 15 58 68	 mov	 DWORD PTR [ecx+196], 1750603025 ; 68581511H

; 64   : 	H[6] = 0x64F98FA7;

  00046	c7 81 c8 00 00
	00 a7 8f f9 64	 mov	 DWORD PTR [ecx+200], 1694076839 ; 64f98fa7H

; 65   : 	H[7] = 0xBEFA4FA4;

  00050	c7 81 cc 00 00
	00 a4 4f fa be	 mov	 DWORD PTR [ecx+204], -1090891868 ; befa4fa4H

; 66   : }

  0005a	c3		 ret	 0
?init@SHA224@@UAEXXZ ENDP				; SHA224::init
PUBLIC	??1SHA224@@QAE@XZ				; SHA224::~SHA224
; Function compile flags: /Ogtpy
;	COMDAT ??1SHA224@@QAE@XZ
_TEXT	SEGMENT
??1SHA224@@QAE@XZ PROC					; SHA224::~SHA224, COMDAT

; 29   : {

  00000	56		 push	 esi

; 30   : }

  00001	be 00 00 00 00	 mov	 esi, OFFSET ?cSHA224@PKCS7@@2VSHA224@@A ; PKCS7::cSHA224
  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cSHA224@PKCS7@@2VSHA224@@A, OFFSET ??_7SHA256@@6B@
  00010	e8 00 00 00 00	 call	 ??1SHA@@QAE@XZ		; SHA::~SHA
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
??1SHA224@@QAE@XZ ENDP					; SHA224::~SHA224
PUBLIC	?Set_SHA224@SHA224@@QAEXXZ			; SHA224::Set_SHA224
; Function compile flags: /Ogtpy
;	COMDAT ?Set_SHA224@SHA224@@QAEXXZ
_TEXT	SEGMENT
$T90402 = -4						; size = 4
?Set_SHA224@SHA224@@QAEXXZ PROC				; SHA224::Set_SHA224, COMDAT

; 40   : {

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 41   : 	szHash = SHA224_HashSize;
; 42   : 
; 43   : 	//ASN.1の定義
; 44   : 	Set();

  00002	b8 28 00 00 00	 mov	 eax, OFFSET ?cSHA224@PKCS7@@2VSHA224@@A+40
  00007	c7 05 a8 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?cSHA224@PKCS7@@2VSHA224@@A+168, 28 ; 0000001cH
  00011	e8 00 00 00 00	 call	 ?clear@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXXZ ; std::vector<ASN1 *,std::allocator<ASN1 *> >::clear
  00016	8d 44 24 04	 lea	 eax, DWORD PTR $T90402[esp+8]
  0001a	50		 push	 eax
  0001b	bf 28 00 00 00	 mov	 edi, OFFSET ?cSHA224@PKCS7@@2VSHA224@@A+40
  00020	c7 44 24 08 44
	00 00 00	 mov	 DWORD PTR $T90402[esp+12], OFFSET ?cSHA224@PKCS7@@2VSHA224@@A+68
  00028	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back
  0002d	5f		 pop	 edi

; 45   : //	Set_Construct(&null);
; 46   : }

  0002e	59		 pop	 ecx
  0002f	c3		 ret	 0
?Set_SHA224@SHA224@@QAEXXZ ENDP				; SHA224::Set_SHA224
PUBLIC	??0SHA224@@QAE@QBD@Z				; SHA224::SHA224
;	COMDAT xdata$x
; File i:\渡部篤史\my project\cms\cms\asn1\asn1.cpp
xdata$x	SEGMENT
__unwindtable$??0SHA224@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SHA224@@QAE@QBD@Z$0
__ehfuncinfo$??0SHA224@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SHA224@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\algorithm\sha-224.cpp
xdata$x	ENDS
;	COMDAT ??0SHA224@@QAE@QBD@Z
_TEXT	SEGMENT
$T95905 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0SHA224@@QAE@QBD@Z PROC				; SHA224::SHA224, COMDAT

; 16   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0SHA224@@QAE@QBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_07NCCCPPC@SHA?9224?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ?cSHA224@PKCS7@@2VSHA224@@A ; PKCS7::cSHA224
  0002e	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _this$[esp+36], OFFSET ?cSHA224@PKCS7@@2VSHA224@@A ; PKCS7::cSHA224
  00036	e8 00 00 00 00	 call	 ??0SHA256@@QAE@QBD@Z	; SHA256::SHA256

; 17   : 	Set_oid(oid,sizeof(oid)/sizeof(int));

  0003b	6a 09		 push	 9
  0003d	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00045	68 00 00 00 00	 push	 OFFSET ?oid@SHA224@@2PAIA ; SHA224::oid
  0004a	b8 44 00 00 00	 mov	 eax, OFFSET ?cSHA224@PKCS7@@2VSHA224@@A+68
  0004f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cSHA224@PKCS7@@2VSHA224@@A, OFFSET ??_7SHA224@@6B@
  00059	e8 00 00 00 00	 call	 ?Set@ObjectIdentifier@@QAEXQAII@Z ; ObjectIdentifier::Set

; 18   : 	Set_SHA224();

  0005e	b8 28 00 00 00	 mov	 eax, OFFSET ?cSHA224@PKCS7@@2VSHA224@@A+40
  00063	c7 05 a8 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?cSHA224@PKCS7@@2VSHA224@@A+168, 28 ; 0000001cH
  0006d	e8 00 00 00 00	 call	 ?clear@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXXZ ; std::vector<ASN1 *,std::allocator<ASN1 *> >::clear
  00072	8d 44 24 08	 lea	 eax, DWORD PTR $T95905[esp+28]
  00076	50		 push	 eax
  00077	bf 28 00 00 00	 mov	 edi, OFFSET ?cSHA224@PKCS7@@2VSHA224@@A+40
  0007c	c7 44 24 0c 44
	00 00 00	 mov	 DWORD PTR $T95905[esp+32], OFFSET ?cSHA224@PKCS7@@2VSHA224@@A+68
  00084	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 19   : }

  00089	b8 00 00 00 00	 mov	 eax, OFFSET ?cSHA224@PKCS7@@2VSHA224@@A ; PKCS7::cSHA224
  0008e	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SHA224@@QAE@QBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SHA256@@QAE@XZ	; SHA256::~SHA256
__ehhandler$??0SHA224@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SHA224@@QAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SHA224@@QAE@QBD@Z ENDP				; SHA224::SHA224
END
