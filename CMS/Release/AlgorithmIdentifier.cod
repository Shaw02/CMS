; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\Algorithm\AlgorithmIdentifier.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4AlgorithmIdentifier@@6B@			; AlgorithmIdentifier::`RTTI Complete Object Locator'
PUBLIC	??_R3AlgorithmIdentifier@@8			; AlgorithmIdentifier::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AlgorithmIdentifier@@8			; AlgorithmIdentifier::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AlgorithmIdentifier@@8		; AlgorithmIdentifier::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAlgorithmIdentifier@@@8			; AlgorithmIdentifier `RTTI Type Descriptor'
PUBLIC	??_7AlgorithmIdentifier@@6B@			; AlgorithmIdentifier::`vftable'
;	COMDAT ??_7AlgorithmIdentifier@@6B@
CONST	SEGMENT
??_7AlgorithmIdentifier@@6B@ DD FLAT:??_R4AlgorithmIdentifier@@6B@ ; AlgorithmIdentifier::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
CONST	ENDS
;	COMDAT ??_R4AlgorithmIdentifier@@6B@
rdata$r	SEGMENT
??_R4AlgorithmIdentifier@@6B@ DD 00H			; AlgorithmIdentifier::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAlgorithmIdentifier@@@8
	DD	FLAT:??_R3AlgorithmIdentifier@@8
rdata$r	ENDS
;	COMDAT ??_R3AlgorithmIdentifier@@8
rdata$r	SEGMENT
??_R3AlgorithmIdentifier@@8 DD 00H			; AlgorithmIdentifier::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2AlgorithmIdentifier@@8
rdata$r	ENDS
;	COMDAT ??_R2AlgorithmIdentifier@@8
rdata$r	SEGMENT
??_R2AlgorithmIdentifier@@8 DD FLAT:??_R1A@?0A@EA@AlgorithmIdentifier@@8 ; AlgorithmIdentifier::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AlgorithmIdentifier@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AlgorithmIdentifier@@8 DD FLAT:??_R0?AVAlgorithmIdentifier@@@8 ; AlgorithmIdentifier::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AlgorithmIdentifier@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithmIdentifier@@@8
_DATA	SEGMENT
??_R0?AVAlgorithmIdentifier@@@8 DD FLAT:??_7type_info@@6B@ ; AlgorithmIdentifier `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithmIdentifier@@', 00H
PUBLIC	?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z ; AlgorithmIdentifier::Check_OID
; Function compile flags: /Ogtpy
; File i:\“n•”“ÄŽj\my project\cms\cms\asn1\algorithm\algorithmidentifier.cpp
;	COMDAT ?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ptOID$ = 12						; size = 4
?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z PROC ; AlgorithmIdentifier::Check_OID, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR _this$[esp]
  00005	56		 push	 esi

; 70   : 	int	i = algorithm.iValue.size();

  00006	8b b5 98 00 00
	00		 mov	 esi, DWORD PTR [ebp+152]
  0000c	2b b5 94 00 00
	00		 sub	 esi, DWORD PTR [ebp+148]
  00012	57		 push	 edi

; 71   : 
; 72   : 	if(i != ptOID->iValue.size()){

  00013	8b 7c 24 14	 mov	 edi, DWORD PTR _ptOID$[esp+8]
  00017	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  0001a	2b 47 50	 sub	 eax, DWORD PTR [edi+80]
  0001d	c1 fe 02	 sar	 esi, 2
  00020	c1 f8 02	 sar	 eax, 2
  00023	3b f0		 cmp	 esi, eax
  00025	74 09		 je	 SHORT $LN22@Check_OID
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 73   : 		return(-1);

  00029	83 c8 ff	 or	 eax, -1
  0002c	5d		 pop	 ebp

; 82   : 	}
; 83   : 
; 84   : /*	if(ptOID->iValue.size() != (sizeof(oid)/sizeof(int))){
; 85   : 		return(-1);
; 86   : 	} else {
; 87   : 		while(i < ((sizeof(oid)/sizeof(int))-1)){
; 88   : 			if(ptOID->iValue[i] != oid[i]){
; 89   : 				return(-1);
; 90   : 			}
; 91   : 			i++;
; 92   : 		}
; 93   : 		return(ptOID->iValue[i]);
; 94   : 	}
; 95   : */
; 96   : }

  0002d	c2 08 00	 ret	 8
$LN22@Check_OID:
  00030	53		 push	 ebx

; 74   : 	} else {
; 75   : 		while(i > 0){

  00031	85 f6		 test	 esi, esi
  00033	7f 0f		 jg	 SHORT $LN3@Check_OID
  00035	5b		 pop	 ebx
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 79   : 			}
; 80   : 		}
; 81   : 		return(0);

  00038	33 c0		 xor	 eax, eax
  0003a	5d		 pop	 ebp

; 82   : 	}
; 83   : 
; 84   : /*	if(ptOID->iValue.size() != (sizeof(oid)/sizeof(int))){
; 85   : 		return(-1);
; 86   : 	} else {
; 87   : 		while(i < ((sizeof(oid)/sizeof(int))-1)){
; 88   : 			if(ptOID->iValue[i] != oid[i]){
; 89   : 				return(-1);
; 90   : 			}
; 91   : 			i++;
; 92   : 		}
; 93   : 		return(ptOID->iValue[i]);
; 94   : 	}
; 95   : */
; 96   : }

  0003b	c2 08 00	 ret	 8
  0003e	8b ff		 npad	 2
$LL24@Check_OID:

; 74   : 	} else {
; 75   : 		while(i > 0){

  00040	8b 7c 24 18	 mov	 edi, DWORD PTR _ptOID$[esp+12]
$LN3@Check_OID:

; 76   : 			i--;
; 77   : 			if(ptOID->iValue[i] != algorithm.iValue[i]){

  00044	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  00047	2b 4f 50	 sub	 ecx, DWORD PTR [edi+80]
  0004a	4e		 dec	 esi
  0004b	c1 f9 02	 sar	 ecx, 2
  0004e	3b f1		 cmp	 esi, ecx
  00050	72 05		 jb	 SHORT $LN12@Check_OID
  00052	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN12@Check_OID:
  00057	8b 95 98 00 00
	00		 mov	 edx, DWORD PTR [ebp+152]
  0005d	2b 95 94 00 00
	00		 sub	 edx, DWORD PTR [ebp+148]
  00063	8b 7f 50	 mov	 edi, DWORD PTR [edi+80]
  00066	8d 1c b5 00 00
	00 00		 lea	 ebx, DWORD PTR [esi*4]
  0006d	c1 fa 02	 sar	 edx, 2
  00070	03 fb		 add	 edi, ebx
  00072	3b f2		 cmp	 esi, edx
  00074	72 05		 jb	 SHORT $LN17@Check_OID
  00076	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN17@Check_OID:
  0007b	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR [ebp+148]
  00081	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00083	3b 0c 03	 cmp	 ecx, DWORD PTR [ebx+eax]
  00086	75 0d		 jne	 SHORT $LN23@Check_OID

; 74   : 	} else {
; 75   : 		while(i > 0){

  00088	85 f6		 test	 esi, esi
  0008a	7f b4		 jg	 SHORT $LL24@Check_OID
  0008c	5b		 pop	 ebx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi

; 79   : 			}
; 80   : 		}
; 81   : 		return(0);

  0008f	33 c0		 xor	 eax, eax
  00091	5d		 pop	 ebp

; 82   : 	}
; 83   : 
; 84   : /*	if(ptOID->iValue.size() != (sizeof(oid)/sizeof(int))){
; 85   : 		return(-1);
; 86   : 	} else {
; 87   : 		while(i < ((sizeof(oid)/sizeof(int))-1)){
; 88   : 			if(ptOID->iValue[i] != oid[i]){
; 89   : 				return(-1);
; 90   : 			}
; 91   : 			i++;
; 92   : 		}
; 93   : 		return(ptOID->iValue[i]);
; 94   : 	}
; 95   : */
; 96   : }

  00092	c2 08 00	 ret	 8
$LN23@Check_OID:
  00095	5b		 pop	 ebx
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi

; 78   : 				return(-1);

  00098	83 c8 ff	 or	 eax, -1
  0009b	5d		 pop	 ebp

; 82   : 	}
; 83   : 
; 84   : /*	if(ptOID->iValue.size() != (sizeof(oid)/sizeof(int))){
; 85   : 		return(-1);
; 86   : 	} else {
; 87   : 		while(i < ((sizeof(oid)/sizeof(int))-1)){
; 88   : 			if(ptOID->iValue[i] != oid[i]){
; 89   : 				return(-1);
; 90   : 			}
; 91   : 			i++;
; 92   : 		}
; 93   : 		return(ptOID->iValue[i]);
; 94   : 	}
; 95   : */
; 96   : }

  0009c	c2 08 00	 ret	 8
?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z ENDP ; AlgorithmIdentifier::Check_OID
PUBLIC	??1AlgorithmIdentifier@@QAE@XZ			; AlgorithmIdentifier::~AlgorithmIdentifier
; Function compile flags: /Ogtpy
;	COMDAT ??1AlgorithmIdentifier@@QAE@XZ
_TEXT	SEGMENT
??1AlgorithmIdentifier@@QAE@XZ PROC			; AlgorithmIdentifier::~AlgorithmIdentifier, COMDAT
; _this$ = esi

; 25   : {

  00000	57		 push	 edi

; 26   : }

  00001	8d 7e 44	 lea	 edi, DWORD PTR [esi+68]
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AlgorithmIdentifier@@6B@
  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ObjectIdentifier@@6B@
  00010	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00013	85 c0		 test	 eax, eax
  00015	74 09		 je	 SHORT $LN10@AlgorithmI
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN10@AlgorithmI:
  00020	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00023	50		 push	 eax
  00024	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  0002b	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  00032	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
  00041	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00046	8b fe		 mov	 edi, esi
  00048	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sequence@@6B@
  0004e	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00053	5f		 pop	 edi
  00054	c3		 ret	 0
??1AlgorithmIdentifier@@QAE@XZ ENDP			; AlgorithmIdentifier::~AlgorithmIdentifier
PUBLIC	?Set@AlgorithmIdentifier@@QAEXXZ		; AlgorithmIdentifier::Set
; Function compile flags: /Ogtpy
;	COMDAT ?Set@AlgorithmIdentifier@@QAEXXZ
_TEXT	SEGMENT
$T80984 = -4						; size = 4
?Set@AlgorithmIdentifier@@QAEXXZ PROC			; AlgorithmIdentifier::Set, COMDAT
; _this$ = eax

; 50   : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f0		 mov	 esi, eax
  00004	57		 push	 edi

; 51   : 	//------
; 52   : 	//Clear_Construct
; 53   : 	Clear_Construct();

  00005	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
  00008	8b c7		 mov	 eax, edi
  0000a	e8 00 00 00 00	 call	 ?clear@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXXZ ; std::vector<ASN1 *,std::allocator<ASN1 *> >::clear

; 54   : 
; 55   : 	//------
; 56   : 	//contentType ContentType
; 57   : 	Set_Construct(&algorithm);

  0000f	8d 44 24 08	 lea	 eax, DWORD PTR $T80984[esp+12]
  00013	83 c6 44	 add	 esi, 68			; 00000044H
  00016	50		 push	 eax
  00017	89 74 24 0c	 mov	 DWORD PTR $T80984[esp+16], esi
  0001b	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 58   : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	59		 pop	 ecx
  00023	c3		 ret	 0
?Set@AlgorithmIdentifier@@QAEXXZ ENDP			; AlgorithmIdentifier::Set
PUBLIC	?Set_oid@AlgorithmIdentifier@@QAEXQAII@Z	; AlgorithmIdentifier::Set_oid
; Function compile flags: /Ogtpy
;	COMDAT ?Set_oid@AlgorithmIdentifier@@QAEXQAII@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Set_oid@AlgorithmIdentifier@@QAEXQAII@Z PROC		; AlgorithmIdentifier::Set_oid, COMDAT
; _i$ = ecx
; _n$ = eax

; 38   : 	algorithm.Set(i,n);

  00000	50		 push	 eax
  00001	8b 44 24 08	 mov	 eax, DWORD PTR _this$[esp]
  00005	51		 push	 ecx
  00006	83 c0 44	 add	 eax, 68			; 00000044H
  00009	e8 00 00 00 00	 call	 ?Set@ObjectIdentifier@@QAEXQAII@Z ; ObjectIdentifier::Set

; 39   : }

  0000e	c2 04 00	 ret	 4
?Set_oid@AlgorithmIdentifier@@QAEXQAII@Z ENDP		; AlgorithmIdentifier::Set_oid
_TEXT	ENDS
PUBLIC	??0AlgorithmIdentifier@@QAE@QBD@Z		; AlgorithmIdentifier::AlgorithmIdentifier
;	COMDAT xdata$x
; File i:\“n•”“ÄŽj\my project\cms\cms\asn1\sequence.cpp
xdata$x	SEGMENT
__unwindtable$??0AlgorithmIdentifier@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AlgorithmIdentifier@@QAE@QBD@Z$0
__ehfuncinfo$??0AlgorithmIdentifier@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AlgorithmIdentifier@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\“n•”“ÄŽj\my project\cms\cms\asn1\algorithm\algorithmidentifier.cpp
xdata$x	ENDS
;	COMDAT ??0AlgorithmIdentifier@@QAE@QBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
__strName$ = 12						; size = 4
??0AlgorithmIdentifier@@QAE@QBD@Z PROC			; AlgorithmIdentifier::AlgorithmIdentifier, COMDAT

; 14   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0AlgorithmIdentifier@@QAE@QBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00021	8b 74 24 18	 mov	 esi, DWORD PTR _this$[esp+16]
  00025	8b 44 24 1c	 mov	 eax, DWORD PTR __strName$[esp+16]
  00029	50		 push	 eax
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  00030	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00033	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  0003b	51		 push	 ecx
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AlgorithmIdentifier@@6B@
  00042	e8 00 00 00 00	 call	 ??0ObjectIdentifier@@QAE@QBD@Z ; ObjectIdentifier::ObjectIdentifier

; 15   : }

  00047	8b c6		 mov	 eax, esi
  00049	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AlgorithmIdentifier@@QAE@QBD@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1Sequence@@QAE@XZ	; Sequence::~Sequence
__ehhandler$??0AlgorithmIdentifier@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AlgorithmIdentifier@@QAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AlgorithmIdentifier@@QAE@QBD@Z ENDP			; AlgorithmIdentifier::AlgorithmIdentifier
END
