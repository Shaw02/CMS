; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\Algorithm\AES_CBC256.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4AES_CBC256@@6B@				; AES_CBC256::`RTTI Complete Object Locator'
PUBLIC	??_R3AES_CBC256@@8				; AES_CBC256::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AES_CBC256@@8				; AES_CBC256::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AES_CBC256@@8			; AES_CBC256::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAES_CBC256@@@8				; AES_CBC256 `RTTI Type Descriptor'
PUBLIC	?oid@AES_CBC256@@2PAIA				; AES_CBC256::oid
PUBLIC	??_7AES_CBC256@@6B@				; AES_CBC256::`vftable'
;	COMDAT ??_7AES_CBC256@@6B@
CONST	SEGMENT
??_7AES_CBC256@@6B@ DD FLAT:??_R4AES_CBC256@@6B@	; AES_CBC256::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
	DD	FLAT:?Set_Key@AES@@UAEXPAX@Z
	DD	FLAT:?Clear_Key@AES@@UAEXXZ
	DD	FLAT:?init@AES_CBC@@UAEXXZ
	DD	FLAT:?encrypt@AES_CBC@@UAEXPAX@Z
	DD	FLAT:?decrypt@AES_CBC@@UAEXPAX@Z
	DD	FLAT:?encrypt_ecb@AES@@UAEXPAX@Z
	DD	FLAT:?decrypt_ecb@AES@@UAEXPAX@Z
	DD	FLAT:?SetIV@AES_CBC@@UAEXPAX@Z
	DD	FLAT:?encipher@AES_CBC@@UAEXPAXI@Z
	DD	FLAT:?decipher@AES_CBC@@UAEXPAXI@Z
	DD	FLAT:?encipher_last@AES_CBC@@UAEHPAXI@Z
	DD	FLAT:?decipher_last@AES_CBC@@UAEHPAXI@Z
	DD	FLAT:?KeyWrap@Encryption@@UAEHPAXI@Z
	DD	FLAT:?KeyUnWrap@Encryption@@UAEHPAXI@Z
	DD	FLAT:?GetKey@Encryption@@UAEPAXXZ
	DD	FLAT:?GetEncrptedKey@Encryption@@UAEPAXXZ
CONST	ENDS
;	COMDAT ??_R4AES_CBC256@@6B@
rdata$r	SEGMENT
??_R4AES_CBC256@@6B@ DD 00H				; AES_CBC256::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAES_CBC256@@@8
	DD	FLAT:??_R3AES_CBC256@@8
rdata$r	ENDS
;	COMDAT ??_R3AES_CBC256@@8
rdata$r	SEGMENT
??_R3AES_CBC256@@8 DD 00H				; AES_CBC256::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2AES_CBC256@@8
rdata$r	ENDS
;	COMDAT ??_R2AES_CBC256@@8
rdata$r	SEGMENT
??_R2AES_CBC256@@8 DD FLAT:??_R1A@?0A@EA@AES_CBC256@@8	; AES_CBC256::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AES_CBC@@8
	DD	FLAT:??_R1A@?0A@EA@AES@@8
	DD	FLAT:??_R1A@?0A@EA@Encryption@@8
	DD	FLAT:??_R1A@?0A@EA@AlgorithmIdentifier@@8
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AES_CBC256@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AES_CBC256@@8 DD FLAT:??_R0?AVAES_CBC256@@@8 ; AES_CBC256::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AES_CBC256@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAES_CBC256@@@8
_DATA	SEGMENT
??_R0?AVAES_CBC256@@@8 DD FLAT:??_7type_info@@6B@	; AES_CBC256 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAES_CBC256@@', 00H
?oid@AES_CBC256@@2PAIA DD 02H				; AES_CBC256::oid
	DD	010H
	DD	0348H
	DD	01H
	DD	065H
	DD	03H
	DD	04H
	DD	01H
	DD	02aH
PUBLIC	??1AES_CBC256@@QAE@XZ				; AES_CBC256::~AES_CBC256
; Function compile flags: /Ogtpy
; File i:\“n•”“ÄŽj\my project\cms\cms\asn1\algorithm\aes_cbc256.cpp
;	COMDAT ??1AES_CBC256@@QAE@XZ
_TEXT	SEGMENT
??1AES_CBC256@@QAE@XZ PROC				; AES_CBC256::~AES_CBC256, COMDAT
; _this$ = eax

; 31   : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AES_CBC256@@6B@

; 32   : }

  00009	e8 00 00 00 00	 call	 ??1AES_CBC@@QAE@XZ	; AES_CBC::~AES_CBC
  0000e	5e		 pop	 esi
  0000f	c3		 ret	 0
??1AES_CBC256@@QAE@XZ ENDP				; AES_CBC256::~AES_CBC256
PUBLIC	??0AES_CBC256@@QAE@QBD@Z			; AES_CBC256::AES_CBC256
;	COMDAT xdata$x
; File i:\“n•”“ÄŽj\my project\cms\cms\asn1\algorithm\algorithmidentifier.cpp
xdata$x	SEGMENT
__unwindtable$??0AES_CBC256@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AES_CBC256@@QAE@QBD@Z$0
__ehfuncinfo$??0AES_CBC256@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AES_CBC256@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\“n•”“ÄŽj\my project\cms\cms\asn1\algorithm\aes_cbc256.cpp
xdata$x	ENDS
;	COMDAT ??0AES_CBC256@@QAE@QBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0AES_CBC256@@QAE@QBD@Z PROC				; AES_CBC256::AES_CBC256, COMDAT

; 16   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0AES_CBC256@@QAE@QBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00021	8b 74 24 18	 mov	 esi, DWORD PTR _this$[esp+16]
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMOLJLBA@AES?9CBC?9256?$AA@
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??0AES_CBC@@QAE@QBD@Z	; AES_CBC::AES_CBC
  00030	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0

; 17   : 	Nk		= 8;
; 18   : 	szKey	= 32;
; 19   : 	mode	= CBC;
; 20   : 	Set_oid(oid,sizeof(oid)/sizeof(int));

  00038	6a 09		 push	 9
  0003a	68 00 00 00 00	 push	 OFFSET ?oid@AES_CBC256@@2PAIA ; AES_CBC256::oid
  0003f	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AES_CBC256@@6B@
  00048	c6 86 a0 01 00
	00 08		 mov	 BYTE PTR [esi+416], 8
  0004f	c7 86 a4 00 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+164], 32	; 00000020H
  00059	c7 86 a8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+168], 1
  00063	e8 00 00 00 00	 call	 ?Set@ObjectIdentifier@@QAEXQAII@Z ; ObjectIdentifier::Set

; 21   : }

  00068	8b c6		 mov	 eax, esi
  0006a	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AES_CBC256@@QAE@QBD@Z$0:
  00000	8b 75 04	 mov	 esi, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1AES_CBC@@QAE@XZ	; AES_CBC::~AES_CBC
__ehhandler$??0AES_CBC256@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AES_CBC256@@QAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AES_CBC256@@QAE@QBD@Z ENDP				; AES_CBC256::AES_CBC256
END
