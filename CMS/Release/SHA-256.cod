; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\Algorithm\SHA-256.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?getHash@SHA256@@UAEXPAX@Z			; SHA256::getHash
PUBLIC	?init@SHA256@@UAEXXZ				; SHA256::init
PUBLIC	??_R4SHA256@@6B@				; SHA256::`RTTI Complete Object Locator'
PUBLIC	?calc@SHA256@@UAEXPAX@Z				; SHA256::calc
PUBLIC	?oid@SHA256@@2PAIA				; SHA256::oid
PUBLIC	??_7SHA256@@6B@					; SHA256::`vftable'
;	COMDAT ??_7SHA256@@6B@
CONST	SEGMENT
??_7SHA256@@6B@ DD FLAT:??_R4SHA256@@6B@		; SHA256::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
	DD	FLAT:?init@SHA256@@UAEXXZ
	DD	FLAT:?final@Digest@@UAEXPAXI@Z
	DD	FLAT:?getHash@SHA256@@UAEXPAX@Z
	DD	FLAT:?calc@SHA256@@UAEXPAX@Z
CONST	ENDS
;	COMDAT ??_R4SHA256@@6B@
rdata$r	SEGMENT
??_R4SHA256@@6B@ DD 00H					; SHA256::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSHA256@@@8
	DD	FLAT:??_R3SHA256@@8
rdata$r	ENDS
;	COMDAT ?k@?1??calc@SHA256@@UAEXPAX@Z@4QBIB
CONST	SEGMENT
?k@?1??calc@SHA256@@UAEXPAX@Z@4QBIB DD 0428a2f98H	; `SHA256::calc'::`2'::k
	DD	071374491H
	DD	0b5c0fbcfH
	DD	0e9b5dba5H
	DD	03956c25bH
	DD	059f111f1H
	DD	0923f82a4H
	DD	0ab1c5ed5H
	DD	0d807aa98H
	DD	012835b01H
	DD	0243185beH
	DD	0550c7dc3H
	DD	072be5d74H
	DD	080deb1feH
	DD	09bdc06a7H
	DD	0c19bf174H
	DD	0e49b69c1H
	DD	0efbe4786H
	DD	0fc19dc6H
	DD	0240ca1ccH
	DD	02de92c6fH
	DD	04a7484aaH
	DD	05cb0a9dcH
	DD	076f988daH
	DD	0983e5152H
	DD	0a831c66dH
	DD	0b00327c8H
	DD	0bf597fc7H
	DD	0c6e00bf3H
	DD	0d5a79147H
	DD	06ca6351H
	DD	014292967H
	DD	027b70a85H
	DD	02e1b2138H
	DD	04d2c6dfcH
	DD	053380d13H
	DD	0650a7354H
	DD	0766a0abbH
	DD	081c2c92eH
	DD	092722c85H
	DD	0a2bfe8a1H
	DD	0a81a664bH
	DD	0c24b8b70H
	DD	0c76c51a3H
	DD	0d192e819H
	DD	0d6990624H
	DD	0f40e3585H
	DD	0106aa070H
	DD	019a4c116H
	DD	01e376c08H
	DD	02748774cH
	DD	034b0bcb5H
	DD	0391c0cb3H
	DD	04ed8aa4aH
	DD	05b9cca4fH
	DD	0682e6ff3H
	DD	0748f82eeH
	DD	078a5636fH
	DD	084c87814H
	DD	08cc70208H
	DD	090befffaH
	DD	0a4506cebH
	DD	0bef9a3f7H
	DD	0c67178f2H
?oid@SHA256@@2PAIA DD 02H				; SHA256::oid
	DD	010H
	DD	0348H
	DD	01H
	DD	065H
	DD	03H
	DD	04H
	DD	02H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\algorithm\sha-256.cpp
;	COMDAT ?getHash@SHA256@@UAEXPAX@Z
_TEXT	SEGMENT
_result$ = 8						; size = 4
?getHash@SHA256@@UAEXPAX@Z PROC				; SHA256::getHash, COMDAT
; _this$ = ecx

; 176  : 				int*	ir	= (int *)result;
; 177  : 	unsigned	int		i	= 0;
; 178  : 	unsigned	int		n;
; 179  : 
; 180  : 	while(i < (sizeof(H)/sizeof(int))){
; 181  : 		//1Byteずつ処理していたら、メモリアクセスが多くなってCPU処理にペナルティが発生する。
; 182  : 		n		= H[i];

  00000	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00006	56		 push	 esi
  00007	57		 push	 edi

; 183  : 		ir[i]	= ((n>>24) & 0xFF) | ((n>>8) & 0xFF00) | ((n & 0xFF00)<<8) | ((n & 0xFF)<<24);

  00008	8b d0		 mov	 edx, eax
  0000a	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  00010	8b f0		 mov	 esi, eax
  00012	c1 ee 10	 shr	 esi, 16			; 00000010H
  00015	0b d6		 or	 edx, esi
  00017	c1 ea 08	 shr	 edx, 8
  0001a	8b f0		 mov	 esi, eax
  0001c	81 e6 00 ff 00
	00		 and	 esi, 65280		; 0000ff00H
  00022	c1 e0 10	 shl	 eax, 16			; 00000010H
  00025	0b f0		 or	 esi, eax
  00027	8b 44 24 0c	 mov	 eax, DWORD PTR _result$[esp+4]
  0002b	c1 e6 08	 shl	 esi, 8
  0002e	0b d6		 or	 edx, esi
  00030	89 10		 mov	 DWORD PTR [eax], edx
  00032	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00038	8b f2		 mov	 esi, edx
  0003a	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  00040	8b fa		 mov	 edi, edx
  00042	c1 ef 10	 shr	 edi, 16			; 00000010H
  00045	0b f7		 or	 esi, edi
  00047	c1 ee 08	 shr	 esi, 8
  0004a	8b fa		 mov	 edi, edx
  0004c	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  00052	c1 e2 10	 shl	 edx, 16			; 00000010H
  00055	0b fa		 or	 edi, edx
  00057	c1 e7 08	 shl	 edi, 8
  0005a	0b f7		 or	 esi, edi
  0005c	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0005f	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  00065	8b f2		 mov	 esi, edx
  00067	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  0006d	8b fa		 mov	 edi, edx
  0006f	c1 ef 10	 shr	 edi, 16			; 00000010H
  00072	0b f7		 or	 esi, edi
  00074	c1 ee 08	 shr	 esi, 8
  00077	8b fa		 mov	 edi, edx
  00079	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  0007f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00082	0b fa		 or	 edi, edx
  00084	c1 e7 08	 shl	 edi, 8
  00087	0b f7		 or	 esi, edi
  00089	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0008c	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00092	8b f2		 mov	 esi, edx
  00094	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  0009a	8b fa		 mov	 edi, edx
  0009c	c1 ef 10	 shr	 edi, 16			; 00000010H
  0009f	0b f7		 or	 esi, edi
  000a1	8b fa		 mov	 edi, edx
  000a3	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  000a9	c1 ee 08	 shr	 esi, 8
  000ac	c1 e2 10	 shl	 edx, 16			; 00000010H
  000af	0b fa		 or	 edi, edx
  000b1	c1 e7 08	 shl	 edi, 8
  000b4	0b f7		 or	 esi, edi
  000b6	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  000b9	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  000bf	8b f2		 mov	 esi, edx
  000c1	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  000c7	8b fa		 mov	 edi, edx
  000c9	c1 ef 10	 shr	 edi, 16			; 00000010H
  000cc	0b f7		 or	 esi, edi
  000ce	8b fa		 mov	 edi, edx
  000d0	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  000d6	c1 e2 10	 shl	 edx, 16			; 00000010H
  000d9	0b fa		 or	 edi, edx
  000db	c1 ee 08	 shr	 esi, 8
  000de	c1 e7 08	 shl	 edi, 8
  000e1	0b f7		 or	 esi, edi
  000e3	89 70 10	 mov	 DWORD PTR [eax+16], esi
  000e6	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  000ec	8b f2		 mov	 esi, edx
  000ee	8b fa		 mov	 edi, edx
  000f0	c1 ef 10	 shr	 edi, 16			; 00000010H
  000f3	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  000f9	0b f7		 or	 esi, edi
  000fb	c1 ee 08	 shr	 esi, 8
  000fe	8b fa		 mov	 edi, edx
  00100	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  00106	c1 e2 10	 shl	 edx, 16			; 00000010H
  00109	0b fa		 or	 edi, edx
  0010b	c1 e7 08	 shl	 edi, 8
  0010e	0b f7		 or	 esi, edi
  00110	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00113	8b 91 c8 00 00
	00		 mov	 edx, DWORD PTR [ecx+200]
  00119	8b f2		 mov	 esi, edx
  0011b	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  00121	8b fa		 mov	 edi, edx
  00123	c1 ef 10	 shr	 edi, 16			; 00000010H
  00126	0b f7		 or	 esi, edi
  00128	8b fa		 mov	 edi, edx
  0012a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0012d	c1 ee 08	 shr	 esi, 8
  00130	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  00136	0b fa		 or	 edi, edx
  00138	c1 e7 08	 shl	 edi, 8
  0013b	0b f7		 or	 esi, edi
  0013d	89 70 18	 mov	 DWORD PTR [eax+24], esi
  00140	8b 89 cc 00 00
	00		 mov	 ecx, DWORD PTR [ecx+204]
  00146	8b d1		 mov	 edx, ecx
  00148	8b f1		 mov	 esi, ecx
  0014a	c1 ee 10	 shr	 esi, 16			; 00000010H
  0014d	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  00153	0b d6		 or	 edx, esi
  00155	8b f1		 mov	 esi, ecx
  00157	81 e6 00 ff 00
	00		 and	 esi, 65280		; 0000ff00H
  0015d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00160	0b f1		 or	 esi, ecx
  00162	c1 e6 08	 shl	 esi, 8
  00165	c1 ea 08	 shr	 edx, 8
  00168	0b d6		 or	 edx, esi
  0016a	5f		 pop	 edi
  0016b	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  0016e	5e		 pop	 esi

; 184  : 		i++;
; 185  : 	}
; 186  : }

  0016f	c2 04 00	 ret	 4
?getHash@SHA256@@UAEXPAX@Z ENDP				; SHA256::getHash
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?calc@SHA256@@UAEXPAX@Z
_TEXT	SEGMENT
_t$ = -309						; size = 1
tv789 = -308						; size = 4
tv357 = -308						; size = 4
_X$ = -304						; size = 32
tv191 = -268						; size = 4
tv609 = -264						; size = 4
tv621 = -260						; size = 4
_w$ = -256						; size = 256
_data$ = 8						; size = 4
?calc@SHA256@@UAEXPAX@Z PROC				; SHA256::calc, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  0000c	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 77   : 	static	const unsigned	int	k[64]={
; 78   : 		0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
; 79   : 		0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
; 80   : 		0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
; 81   : 		0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
; 82   : 		0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
; 83   : 		0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
; 84   : 		0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
; 85   : 		0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
; 86   : };
; 87   : 
; 88   : 	unsigned int*	iData = (unsigned int*)data;
; 89   : 	unsigned char	t=0;
; 90   : 
; 91   : 	__m128i	_m[4];
; 92   : 
; 93   : 	__declspec(align(8))	unsigned int	w[64];
; 94   : 	__declspec(align(16))	unsigned int	X[8];
; 95   : 							unsigned int	T1;
; 96   : 							unsigned int	T2;
; 97   : 
; 98   : #define	a	X[0]
; 99   : #define	b	X[1]
; 100  : #define	c	X[2]
; 101  : #define	d	X[3]
; 102  : #define	e	X[4]
; 103  : #define	f	X[5]
; 104  : #define	g	X[6]
; 105  : #define	h	X[7]
; 106  : #define	T	T1
; 107  : 
; 108  : 	//----------------------------
; 109  : 	//入力データの拡張
; 110  : 	do{
; 111  : 		T = iData[t];

  00013	8d 4c 24 4c	 lea	 ecx, DWORD PTR _w$[esp+332]

; 112  : 		w[t] = ((T>>24)&0xFF | ((T>>16)&0xFF)<<8 | ((T>>8)&0xFF)<<16 | (T&0xFF)<<24);
; 113  : 		t ++;
; 114  : 	} while(t<16);

  00017	8b c1		 mov	 eax, ecx
  00019	2b d0		 sub	 edx, eax
  0001b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00020	57		 push	 edi
  00021	89 44 24 1c	 mov	 DWORD PTR tv357[esp+336], eax
  00025	88 44 24 1b	 mov	 BYTE PTR _t$[esp+336], al
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL9@calc:
  00030	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00033	8b f8		 mov	 edi, eax
  00035	81 e7 00 00 ff
	00		 and	 edi, 16711680		; 00ff0000H
  0003b	8b d8		 mov	 ebx, eax
  0003d	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00040	0b fb		 or	 edi, ebx
  00042	8b d8		 mov	 ebx, eax
  00044	81 e3 00 ff 00
	00		 and	 ebx, 65280		; 0000ff00H
  0004a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0004d	0b d8		 or	 ebx, eax
  0004f	c1 ef 08	 shr	 edi, 8
  00052	c1 e3 08	 shl	 ebx, 8
  00055	0b fb		 or	 edi, ebx
  00057	89 39		 mov	 DWORD PTR [ecx], edi
  00059	83 c1 04	 add	 ecx, 4
  0005c	83 6c 24 1c 01	 sub	 DWORD PTR tv357[esp+336], 1
  00061	75 cd		 jne	 SHORT $LL9@calc
  00063	8a 4c 24 1b	 mov	 cl, BYTE PTR _t$[esp+336]
  00067	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL6@calc:
  00070	0f b6 c1	 movzx	 eax, cl

; 115  : 
; 116  : 	do{
; 117  : 		_m[0] = _mm_A1_256(	_mm_loadl_epi64((__m128i*)&w[t-2]));

  00073	f3 0f 7e 4c 84
	48		 movq	 xmm1, QWORD PTR _w$[esp+eax*4+328]
  00079	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0007d	66 0f 6f d1	 movdqa	 xmm2, xmm1
  00081	66 0f 72 f2 0f	 pslld	 xmm2, 15		; 0000000fH
  00086	66 0f 72 d0 11	 psrld	 xmm0, 17		; 00000011H
  0008b	66 0f eb c2	 por	 xmm0, xmm2
  0008f	66 0f 6f d1	 movdqa	 xmm2, xmm1
  00093	66 0f 72 d2 13	 psrld	 xmm2, 19		; 00000013H
  00098	66 0f 6f d9	 movdqa	 xmm3, xmm1
  0009c	66 0f 72 d1 0a	 psrld	 xmm1, 10		; 0000000aH
  000a1	66 0f 72 f3 0d	 pslld	 xmm3, 13		; 0000000dH
  000a6	66 0f eb d3	 por	 xmm2, xmm3

; 118  : 		_m[1] =				_mm_loadl_epi64((__m128i*)&w[t-7]);

  000aa	f3 0f 7e 5c 84
	34		 movq	 xmm3, QWORD PTR _w$[esp+eax*4+308]
  000b0	66 0f ef d1	 pxor	 xmm2, xmm1

; 119  : 		_m[2] = _mm_A0_256(	_mm_loadl_epi64((__m128i*)&w[t-15]));

  000b4	f3 0f 7e 4c 84
	14		 movq	 xmm1, QWORD PTR _w$[esp+eax*4+276]
  000ba	66 0f ef c2	 pxor	 xmm0, xmm2
  000be	66 0f 6f d1	 movdqa	 xmm2, xmm1
  000c2	66 0f 6f e1	 movdqa	 xmm4, xmm1
  000c6	66 0f 72 f4 19	 pslld	 xmm4, 25		; 00000019H
  000cb	66 0f 72 d2 07	 psrld	 xmm2, 7
  000d0	66 0f eb d4	 por	 xmm2, xmm4
  000d4	66 0f 6f e1	 movdqa	 xmm4, xmm1
  000d8	66 0f 6f e9	 movdqa	 xmm5, xmm1
  000dc	66 0f 72 d4 12	 psrld	 xmm4, 18		; 00000012H
  000e1	66 0f 72 f5 0e	 pslld	 xmm5, 14		; 0000000eH
  000e6	66 0f 72 d1 03	 psrld	 xmm1, 3
  000eb	66 0f eb e5	 por	 xmm4, xmm5
  000ef	66 0f ef e1	 pxor	 xmm4, xmm1

; 120  : 		_m[3] =				_mm_loadl_epi64((__m128i*)&w[t-16]);

  000f3	f3 0f 7e 4c 84
	10		 movq	 xmm1, QWORD PTR _w$[esp+eax*4+272]
  000f9	66 0f ef d4	 pxor	 xmm2, xmm4

; 121  : 
; 122  : 		_mm_storel_epi64((__m128i*)&w[t], _mm_add_epi32(_mm_add_epi32(_m[0],_m[1]), _mm_add_epi32(_m[2],_m[3])));
; 123  : 
; 124  : 		t += 2;

  000fd	80 c1 02	 add	 cl, 2
  00100	66 0f fe c3	 paddd	 xmm0, xmm3
  00104	66 0f fe d1	 paddd	 xmm2, xmm1
  00108	66 0f fe c2	 paddd	 xmm0, xmm2
  0010c	66 0f d6 44 84
	50		 movq	 QWORD PTR _w$[esp+eax*4+336], xmm0

; 125  : 	} while(t<64);

  00112	80 f9 40	 cmp	 cl, 64			; 00000040H
  00115	0f 82 55 ff ff
	ff		 jb	 $LL6@calc

; 126  : 
; 127  : 
; 128  : 
; 129  : 	//----------------------------
; 130  : 	//ハッシュ計算
; 131  : 
; 132  : //	メモリに入るので、逆に遅くなる。
; 133  : //	memcpy(X,H,sizeof(H));
; 134  : 
; 135  : //	こうすると、まずはレジスターに入る。
; 136  : 	a = H[0];

  0011b	8b 96 b0 00 00
	00		 mov	 edx, DWORD PTR [esi+176]

; 137  : 	b = H[1];

  00121	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]

; 138  : 	c = H[2];
; 139  : 	d = H[3];
; 140  : 	e = H[4];
; 141  : 	f = H[5];
; 142  : 	g = H[6];

  00127	8b be c8 00 00
	00		 mov	 edi, DWORD PTR [esi+200]
  0012d	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
  00133	89 44 24 48	 mov	 DWORD PTR tv609[esp+336], eax
  00137	8b 86 b8 00 00
	00		 mov	 eax, DWORD PTR [esi+184]
  0013d	89 4c 24 24	 mov	 DWORD PTR _X$[esp+340], ecx
  00141	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
  00147	89 44 24 28	 mov	 DWORD PTR _X$[esp+344], eax
  0014b	8d 86 c0 00 00
	00		 lea	 eax, DWORD PTR [esi+192]
  00151	89 4c 24 2c	 mov	 DWORD PTR _X$[esp+348], ecx
  00155	8b 08		 mov	 ecx, DWORD PTR [eax]
  00157	89 44 24 4c	 mov	 DWORD PTR tv621[esp+336], eax
  0015b	8b 86 c4 00 00
	00		 mov	 eax, DWORD PTR [esi+196]
  00161	89 44 24 34	 mov	 DWORD PTR _X$[esp+356], eax

; 143  : 	h = H[7];

  00165	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]

; 144  : 
; 145  : 	t=0;
; 146  : 	do{
; 147  : 		T1 = h + S256_1(e) + Ch(e,f,g) + k[t] + w[t];
; 148  : 		T2 = S256_0(a) + Maj(a,b,c);
; 149  : 
; 150  : 		h  = g;
; 151  : 		g  = f;
; 152  : 		f  = e;
; 153  : 		e  = d + T1;
; 154  : 		d  = c;
; 155  : 		c  = b;
; 156  : 		b  = a;
; 157  : 		a  = T1 + T2;
; 158  : 
; 159  : 		t++;
; 160  : 	} while(t<64);

  0016b	33 f6		 xor	 esi, esi
  0016d	89 7c 24 38	 mov	 DWORD PTR _X$[esp+360], edi
  00171	89 44 24 3c	 mov	 DWORD PTR _X$[esp+364], eax
  00175	89 74 24 1c	 mov	 DWORD PTR tv789[esp+336], esi
  00179	c7 44 24 44 40
	00 00 00	 mov	 DWORD PTR tv191[esp+336], 64 ; 00000040H
$LL3@calc:
  00181	8b c1		 mov	 eax, ecx
  00183	c1 c8 0b	 ror	 eax, 11			; 0000000bH
  00186	8b d9		 mov	 ebx, ecx
  00188	c1 c3 07	 rol	 ebx, 7
  0018b	33 c3		 xor	 eax, ebx
  0018d	8b d9		 mov	 ebx, ecx
  0018f	c1 cb 06	 ror	 ebx, 6
  00192	33 c3		 xor	 eax, ebx
  00194	8b d9		 mov	 ebx, ecx
  00196	f7 d3		 not	 ebx
  00198	23 df		 and	 ebx, edi
  0019a	8b 7c 24 34	 mov	 edi, DWORD PTR _X$[esp+356]
  0019e	23 f9		 and	 edi, ecx
  001a0	33 df		 xor	 ebx, edi
  001a2	03 c3		 add	 eax, ebx
  001a4	03 86 00 00 00
	00		 add	 eax, DWORD PTR ?k@?1??calc@SHA256@@UAEXPAX@Z@4QBIB[esi]
  001aa	8b 5c 24 24	 mov	 ebx, DWORD PTR _X$[esp+340]
  001ae	03 44 34 50	 add	 eax, DWORD PTR _w$[esp+esi+336]
  001b2	8b f2		 mov	 esi, edx
  001b4	03 44 24 3c	 add	 eax, DWORD PTR _X$[esp+364]
  001b8	c1 ce 0d	 ror	 esi, 13			; 0000000dH
  001bb	8b fa		 mov	 edi, edx
  001bd	c1 c7 0a	 rol	 edi, 10			; 0000000aH
  001c0	33 f7		 xor	 esi, edi
  001c2	8b fa		 mov	 edi, edx
  001c4	c1 cf 02	 ror	 edi, 2
  001c7	33 f7		 xor	 esi, edi
  001c9	8b 7c 24 24	 mov	 edi, DWORD PTR _X$[esp+340]
  001cd	33 fa		 xor	 edi, edx
  001cf	23 7c 24 28	 and	 edi, DWORD PTR _X$[esp+344]
  001d3	23 da		 and	 ebx, edx
  001d5	33 fb		 xor	 edi, ebx
  001d7	8b 5c 24 28	 mov	 ebx, DWORD PTR _X$[esp+344]
  001db	03 f7		 add	 esi, edi
  001dd	8b 7c 24 38	 mov	 edi, DWORD PTR _X$[esp+360]
  001e1	89 7c 24 3c	 mov	 DWORD PTR _X$[esp+364], edi
  001e5	8b 7c 24 34	 mov	 edi, DWORD PTR _X$[esp+356]
  001e9	89 4c 24 34	 mov	 DWORD PTR _X$[esp+356], ecx
  001ed	8b 4c 24 2c	 mov	 ecx, DWORD PTR _X$[esp+348]
  001f1	89 5c 24 2c	 mov	 DWORD PTR _X$[esp+348], ebx
  001f5	8b 5c 24 24	 mov	 ebx, DWORD PTR _X$[esp+340]
  001f9	89 54 24 24	 mov	 DWORD PTR _X$[esp+340], edx
  001fd	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]
  00200	8b 74 24 1c	 mov	 esi, DWORD PTR tv789[esp+336]
  00204	83 c6 04	 add	 esi, 4
  00207	03 c8		 add	 ecx, eax
  00209	83 6c 24 44 01	 sub	 DWORD PTR tv191[esp+336], 1
  0020e	89 7c 24 38	 mov	 DWORD PTR _X$[esp+360], edi
  00212	89 5c 24 28	 mov	 DWORD PTR _X$[esp+344], ebx
  00216	89 74 24 1c	 mov	 DWORD PTR tv789[esp+336], esi
  0021a	0f 85 61 ff ff
	ff		 jne	 $LL3@calc

; 161  : 
; 162  : 	_mm_storeu_si128((__m128i*)&H[0] ,_mm_add_epi32(_mm_loadu_si128((__m128i*)&H[0]), _mm_load_si128((__m128i*)&X[0])));

  00220	8b 44 24 48	 mov	 eax, DWORD PTR tv609[esp+336]
  00224	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00228	89 54 24 20	 mov	 DWORD PTR _X$[esp+336], edx
  0022c	66 0f 6f 4c 24
	20		 movdqa	 xmm1, XMMWORD PTR _X$[esp+336]
  00232	66 0f fe c1	 paddd	 xmm0, xmm1
  00236	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0

; 163  : 	_mm_storeu_si128((__m128i*)&H[4] ,_mm_add_epi32(_mm_loadu_si128((__m128i*)&H[4]), _mm_load_si128((__m128i*)&X[4])));

  0023a	8b 44 24 4c	 mov	 eax, DWORD PTR tv621[esp+336]
  0023e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]

; 164  : 
; 165  : }

  00242	5f		 pop	 edi
  00243	89 4c 24 2c	 mov	 DWORD PTR _X$[esp+348], ecx
  00247	66 0f 6f 4c 24
	2c		 movdqa	 xmm1, XMMWORD PTR _X$[esp+348]
  0024d	5e		 pop	 esi
  0024e	66 0f fe c1	 paddd	 xmm0, xmm1
  00252	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  00256	5b		 pop	 ebx
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 04 00	 ret	 4
?calc@SHA256@@UAEXPAX@Z ENDP				; SHA256::calc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?init@SHA256@@UAEXXZ
_TEXT	SEGMENT
?init@SHA256@@UAEXXZ PROC				; SHA256::init, COMDAT
; _this$ = ecx

; 57   : 	iCountBlock = 0;

  00000	c7 81 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+160], 0

; 58   : 	H[0] = 0x6A09E667;

  0000a	c7 81 b0 00 00
	00 67 e6 09 6a	 mov	 DWORD PTR [ecx+176], 1779033703 ; 6a09e667H

; 59   : 	H[1] = 0xBB67AE85;

  00014	c7 81 b4 00 00
	00 85 ae 67 bb	 mov	 DWORD PTR [ecx+180], -1150833019 ; bb67ae85H

; 60   : 	H[2] = 0x3C6EF372;

  0001e	c7 81 b8 00 00
	00 72 f3 6e 3c	 mov	 DWORD PTR [ecx+184], 1013904242 ; 3c6ef372H

; 61   : 	H[3] = 0xA54FF53A;

  00028	c7 81 bc 00 00
	00 3a f5 4f a5	 mov	 DWORD PTR [ecx+188], -1521486534 ; a54ff53aH

; 62   : 	H[4] = 0x510E527F;

  00032	c7 81 c0 00 00
	00 7f 52 0e 51	 mov	 DWORD PTR [ecx+192], 1359893119 ; 510e527fH

; 63   : 	H[5] = 0x9B05688C;

  0003c	c7 81 c4 00 00
	00 8c 68 05 9b	 mov	 DWORD PTR [ecx+196], -1694144372 ; 9b05688cH

; 64   : 	H[6] = 0x1F83D9AB;

  00046	c7 81 c8 00 00
	00 ab d9 83 1f	 mov	 DWORD PTR [ecx+200], 528734635 ; 1f83d9abH

; 65   : 	H[7] = 0x5BE0CD19;

  00050	c7 81 cc 00 00
	00 19 cd e0 5b	 mov	 DWORD PTR [ecx+204], 1541459225 ; 5be0cd19H

; 66   : }

  0005a	c3		 ret	 0
?init@SHA256@@UAEXXZ ENDP				; SHA256::init
PUBLIC	??1SHA256@@QAE@XZ				; SHA256::~SHA256
; Function compile flags: /Ogtpy
;	COMDAT ??1SHA256@@QAE@XZ
_TEXT	SEGMENT
??1SHA256@@QAE@XZ PROC					; SHA256::~SHA256, COMDAT
; _this$ = eax

; 29   : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SHA256@@6B@

; 30   : }

  00009	e8 00 00 00 00	 call	 ??1SHA@@QAE@XZ		; SHA::~SHA
  0000e	5e		 pop	 esi
  0000f	c3		 ret	 0
??1SHA256@@QAE@XZ ENDP					; SHA256::~SHA256
PUBLIC	?Set_SHA256@SHA256@@QAEXXZ			; SHA256::Set_SHA256
; Function compile flags: /Ogtpy
;	COMDAT ?Set_SHA256@SHA256@@QAEXXZ
_TEXT	SEGMENT
$T90251 = -4						; size = 4
?Set_SHA256@SHA256@@QAEXXZ PROC				; SHA256::Set_SHA256, COMDAT
; _this$ = eax

; 40   : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f0		 mov	 esi, eax
  00004	57		 push	 edi

; 41   : 	szHash = SHA256_HashSize;
; 42   : 
; 43   : 	//ASN.1の定義
; 44   : 	Set();

  00005	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
  00008	8b c7		 mov	 eax, edi
  0000a	c7 86 a8 00 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+168], 32	; 00000020H
  00014	e8 00 00 00 00	 call	 ?clear@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXXZ ; std::vector<ASN1 *,std::allocator<ASN1 *> >::clear
  00019	8d 44 24 08	 lea	 eax, DWORD PTR $T90251[esp+12]
  0001d	83 c6 44	 add	 esi, 68			; 00000044H
  00020	50		 push	 eax
  00021	89 74 24 0c	 mov	 DWORD PTR $T90251[esp+16], esi
  00025	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 45   : //	Set_Construct(&null);
; 46   : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
?Set_SHA256@SHA256@@QAEXXZ ENDP				; SHA256::Set_SHA256
PUBLIC	??0SHA256@@QAE@QBD@Z				; SHA256::SHA256
;	COMDAT xdata$x
; File i:\渡部篤史\my project\cms\cms\asn1\asn1.cpp
xdata$x	SEGMENT
__unwindtable$??0SHA256@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SHA256@@QAE@QBD@Z$0
__ehfuncinfo$??0SHA256@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SHA256@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\algorithm\sha-256.cpp
xdata$x	ENDS
;	COMDAT ??0SHA256@@QAE@QBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
$T95735 = 12						; size = 4
__strName$ = 12						; size = 4
??0SHA256@@QAE@QBD@Z PROC				; SHA256::SHA256, COMDAT

; 16   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0SHA256@@QAE@QBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b 74 24 20	 mov	 esi, DWORD PTR _this$[esp+24]
  00027	8b 44 24 24	 mov	 eax, DWORD PTR __strName$[esp+24]
  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??0SHA@@QAE@QBD@Z	; SHA::SHA

; 17   : 	Set_oid(oid,sizeof(oid)/sizeof(int));

  00032	6a 09		 push	 9
  00034	8d 5e 44	 lea	 ebx, DWORD PTR [esi+68]
  00037	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  0003f	68 00 00 00 00	 push	 OFFSET ?oid@SHA256@@2PAIA ; SHA256::oid
  00044	8b c3		 mov	 eax, ebx
  00046	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SHA256@@6B@
  0004c	e8 00 00 00 00	 call	 ?Set@ObjectIdentifier@@QAEXQAII@Z ; ObjectIdentifier::Set

; 18   : 	Set_SHA256();

  00051	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
  00054	8b c7		 mov	 eax, edi
  00056	c7 86 a8 00 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+168], 32	; 00000020H
  00060	e8 00 00 00 00	 call	 ?clear@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXXZ ; std::vector<ASN1 *,std::allocator<ASN1 *> >::clear
  00065	8d 4c 24 24	 lea	 ecx, DWORD PTR $T95735[esp+24]
  00069	51		 push	 ecx
  0006a	89 5c 24 28	 mov	 DWORD PTR $T95735[esp+28], ebx
  0006e	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 19   : }

  00073	8b c6		 mov	 eax, esi
  00075	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SHA256@@QAE@QBD@Z$0:
  00000	8b 75 04	 mov	 esi, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1SHA@@QAE@XZ		; SHA::~SHA
__ehhandler$??0SHA256@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SHA256@@QAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SHA256@@QAE@QBD@Z ENDP				; SHA256::SHA256
END
