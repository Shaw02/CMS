; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\Integer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?encodeBER@Integer@@UAEXXZ			; Integer::encodeBER
PUBLIC	??_R4Integer@@6B@				; Integer::`RTTI Complete Object Locator'
PUBLIC	??_R3Integer@@8					; Integer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Integer@@8					; Integer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Integer@@8			; Integer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVInteger@@@8				; Integer `RTTI Type Descriptor'
PUBLIC	??_7Integer@@6B@				; Integer::`vftable'
;	COMDAT ??_7Integer@@6B@
CONST	SEGMENT
??_7Integer@@6B@ DD FLAT:??_R4Integer@@6B@		; Integer::`vftable'
	DD	FLAT:?encodeBER@Integer@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
CONST	ENDS
;	COMDAT ??_R4Integer@@6B@
rdata$r	SEGMENT
??_R4Integer@@6B@ DD 00H				; Integer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInteger@@@8
	DD	FLAT:??_R3Integer@@8
rdata$r	ENDS
;	COMDAT ??_R3Integer@@8
rdata$r	SEGMENT
??_R3Integer@@8 DD 00H					; Integer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Integer@@8
rdata$r	ENDS
;	COMDAT ??_R2Integer@@8
rdata$r	SEGMENT
??_R2Integer@@8 DD FLAT:??_R1A@?0A@EA@Integer@@8	; Integer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Integer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Integer@@8 DD FLAT:??_R0?AVInteger@@@8	; Integer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Integer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVInteger@@@8
_DATA	SEGMENT
??_R0?AVInteger@@@8 DD FLAT:??_7type_info@@6B@		; Integer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInteger@@', 00H
PUBLIC	?Set@Integer@@QAEXH@Z				; Integer::Set
; Function compile flags: /Ogtpy
; File i:\“n•”“ÄŽj\my project\cms\cms\asn1\integer.cpp
;	COMDAT ?Set@Integer@@QAEXH@Z
_TEXT	SEGMENT
?Set@Integer@@QAEXH@Z PROC				; Integer::Set, COMDAT
; _this$ = eax
; _i$ = ecx

; 50   : 	iValue = i;

  00000	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 51   : }

  00003	c3		 ret	 0
?Set@Integer@@QAEXH@Z ENDP				; Integer::Set
PUBLIC	??1Integer@@QAE@XZ				; Integer::~Integer
; Function compile flags: /Ogtpy
;	COMDAT ??1Integer@@QAE@XZ
_TEXT	SEGMENT
??1Integer@@QAE@XZ PROC					; Integer::~Integer, COMDAT
; _this$ = eax

; 25   : {

  00000	57		 push	 edi
  00001	8b f8		 mov	 edi, eax
  00003	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Integer@@6B@

; 26   : }

  00009	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  0000e	5f		 pop	 edi
  0000f	c3		 ret	 0
??1Integer@@QAE@XZ ENDP					; Integer::~Integer
; Function compile flags: /Ogtpy
;	COMDAT ?encodeBER@Integer@@UAEXXZ
_TEXT	SEGMENT
?encodeBER@Integer@@UAEXXZ PROC				; Integer::encodeBER, COMDAT
; _this$ = ecx

; 36   : {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 37   : 	encodeBER_TAG(BER_Class_General, false, BER_TAG_INTEGER, Get_szInt_for_BER(iValue));

  00004	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00007	8d 88 80 00 00
	00		 lea	 ecx, DWORD PTR [eax+128]
  0000d	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00013	77 07		 ja	 SHORT $LN8@encodeBER@3
  00015	bb 01 00 00 00	 mov	 ebx, 1
  0001a	eb 28		 jmp	 SHORT $LN4@encodeBER@3
$LN8@encodeBER@3:
  0001c	8d 90 00 80 00
	00		 lea	 edx, DWORD PTR [eax+32768]
  00022	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  00028	77 07		 ja	 SHORT $LN6@encodeBER@3
  0002a	bb 02 00 00 00	 mov	 ebx, 2
  0002f	eb 13		 jmp	 SHORT $LN4@encodeBER@3
$LN6@encodeBER@3:
  00031	05 00 00 80 00	 add	 eax, 8388608		; 00800000H
  00036	b9 ff ff ff 00	 mov	 ecx, 16777215		; 00ffffffH
  0003b	3b c8		 cmp	 ecx, eax
  0003d	1b db		 sbb	 ebx, ebx
  0003f	f7 db		 neg	 ebx
  00041	83 c3 03	 add	 ebx, 3
$LN4@encodeBER@3:
  00044	83 7f 24 01	 cmp	 DWORD PTR [edi+36], 1
  00048	74 48		 je	 SHORT $LN13@encodeBER@3
  0004a	83 7f 20 01	 cmp	 DWORD PTR [edi+32], 1
  0004e	56		 push	 esi
  0004f	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00052	73 0d		 jae	 SHORT $LN24@encodeBER@3
  00054	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00057	52		 push	 edx
  00058	6a 01		 push	 1
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN24@encodeBER@3:
  00061	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00066	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00069	39 56 18	 cmp	 DWORD PTR [esi+24], edx
  0006c	72 04		 jb	 SHORT $LN76@encodeBER@3
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	eb 02		 jmp	 SHORT $LN77@encodeBER@3
$LN76@encodeBER@3:
  00072	8b c8		 mov	 ecx, eax
$LN77@encodeBER@3:
  00074	c6 01 02	 mov	 BYTE PTR [ecx], 2
  00077	39 56 18	 cmp	 DWORD PTR [esi+24], edx
  0007a	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  00081	5e		 pop	 esi
  00082	72 02		 jb	 SHORT $LN90@encodeBER@3
  00084	8b 00		 mov	 eax, DWORD PTR [eax]
$LN90@encodeBER@3:
  00086	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  0008a	53		 push	 ebx
  0008b	8b c7		 mov	 eax, edi
  0008d	e8 00 00 00 00	 call	 ?encodeBER_size@ASN1@@QAEXI@Z ; ASN1::encodeBER_size
$LN13@encodeBER@3:

; 38   : 	encodeBER_int(iValue);

  00092	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00095	50		 push	 eax
  00096	8b c7		 mov	 eax, edi
  00098	e8 00 00 00 00	 call	 ?encodeBER_int@ASN1@@QAEXH@Z ; ASN1::encodeBER_int
  0009d	5f		 pop	 edi
  0009e	5b		 pop	 ebx

; 39   : }

  0009f	c3		 ret	 0
?encodeBER@Integer@@UAEXXZ ENDP				; Integer::encodeBER
PUBLIC	??0Integer@@QAE@QBD@Z				; Integer::Integer
; Function compile flags: /Ogtpy
;	COMDAT ??0Integer@@QAE@QBD@Z
_TEXT	SEGMENT
??0Integer@@QAE@QBD@Z PROC				; Integer::Integer, COMDAT
; _this$ = esi

; 14   : {

  00000	51		 push	 ecx
  00001	68 00 00 00 00	 push	 OFFSET ??_C@_07EDADKEAH@Integer?$AA@
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Integer@@6B@

; 15   : }

  00012	8b c6		 mov	 eax, esi
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??0Integer@@QAE@QBD@Z ENDP				; Integer::Integer
END
