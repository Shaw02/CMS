; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\PKCS7\PKCS7_6_Output.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4PKCS7_6_Output@@6BBER_Output@@@		; PKCS7_6_Output::`RTTI Complete Object Locator'
PUBLIC	??_R4PKCS7_6_Output@@6BPKCS7@@@			; PKCS7_6_Output::`RTTI Complete Object Locator'
PUBLIC	??_R3PKCS7_6_Output@@8				; PKCS7_6_Output::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PKCS7_6_Output@@8				; PKCS7_6_Output::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PKCS7_6_Output@@8			; PKCS7_6_Output::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPKCS7_6_Output@@@8			; PKCS7_6_Output `RTTI Type Descriptor'
PUBLIC	??_DPKCS7_6_Output@@QAEXXZ			; PKCS7_6_Output::`vbase destructor'
PUBLIC	??_GPKCS7_6_Output@@UAEPAXI@Z			; PKCS7_6_Output::`scalar deleting destructor'
PUBLIC	??_C@_0CA@BPHDHPBC@?3?5Unknown?5encryption?5algorithm?4?$AA@ ; `string'
PUBLIC	??_7PKCS7_6_Output@@6BPKCS7@@@			; PKCS7_6_Output::`vftable'
PUBLIC	??_7PKCS7_6_Output@@6BBER_Output@@@		; PKCS7_6_Output::`vftable'
PUBLIC	??_8PKCS7_6_Output@@7B@				; PKCS7_6_Output::`vbtable'
EXTRN	??_EPKCS7_6_Output@@UAEPAXI@Z:PROC		; PKCS7_6_Output::`vector deleting destructor'
;	COMDAT ??_8PKCS7_6_Output@@7B@
CONST	SEGMENT
??_8PKCS7_6_Output@@7B@ DD 00H				; PKCS7_6_Output::`vbtable'
	DD	0238H
CONST	ENDS
;	COMDAT ??_7PKCS7_6_Output@@6BBER_Output@@@
CONST	SEGMENT
??_7PKCS7_6_Output@@6BBER_Output@@@ DD FLAT:??_R4PKCS7_6_Output@@6BBER_Output@@@ ; PKCS7_6_Output::`vftable'
	DD	FLAT:??_EPKCS7_6_Output@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4PKCS7_6_Output@@6BBER_Output@@@
rdata$r	SEGMENT
??_R4PKCS7_6_Output@@6BBER_Output@@@ DD 00H		; PKCS7_6_Output::`RTTI Complete Object Locator'
	DD	0608H
	DD	00H
	DD	FLAT:??_R0?AVPKCS7_6_Output@@@8
	DD	FLAT:??_R3PKCS7_6_Output@@8
rdata$r	ENDS
;	COMDAT ??_7PKCS7_6_Output@@6BPKCS7@@@
CONST	SEGMENT
??_7PKCS7_6_Output@@6BPKCS7@@@ DD FLAT:??_R4PKCS7_6_Output@@6BPKCS7@@@ ; PKCS7_6_Output::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
CONST	ENDS
;	COMDAT ??_R4PKCS7_6_Output@@6BPKCS7@@@
rdata$r	SEGMENT
??_R4PKCS7_6_Output@@6BPKCS7@@@ DD 00H			; PKCS7_6_Output::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPKCS7_6_Output@@@8
	DD	FLAT:??_R3PKCS7_6_Output@@8
rdata$r	ENDS
;	COMDAT ??_R3PKCS7_6_Output@@8
rdata$r	SEGMENT
??_R3PKCS7_6_Output@@8 DD 00H				; PKCS7_6_Output::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0dH
	DD	FLAT:??_R2PKCS7_6_Output@@8
rdata$r	ENDS
;	COMDAT ??_R2PKCS7_6_Output@@8
rdata$r	SEGMENT
??_R2PKCS7_6_Output@@8 DD FLAT:??_R1A@?0A@EA@PKCS7_6_Output@@8 ; PKCS7_6_Output::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PKCS7_Output@@8
	DD	FLAT:??_R1DNA@?0A@EA@BER_Output@@8
	DD	FLAT:??_R1DNA@?0A@EA@FileOutput@@8
	DD	FLAT:??_R1DNA@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1DNA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@DNA@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@DNA@3EA@ios_base@std@@8
	DD	FLAT:??_R13DNA@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1A@?0A@EA@PKCS7@@8
	DD	FLAT:??_R1A@?0A@EA@ContentInfo@@8
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PKCS7_6_Output@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PKCS7_6_Output@@8 DD FLAT:??_R0?AVPKCS7_6_Output@@@8 ; PKCS7_6_Output::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PKCS7_6_Output@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPKCS7_6_Output@@@8
_DATA	SEGMENT
??_R0?AVPKCS7_6_Output@@@8 DD FLAT:??_7type_info@@6B@	; PKCS7_6_Output `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPKCS7_6_Output@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0CA@BPHDHPBC@?3?5Unknown?5encryption?5algorithm?4?$AA@
CONST	SEGMENT
??_C@_0CA@BPHDHPBC@?3?5Unknown?5encryption?5algorithm?4?$AA@ DB ': Unknow'
	DB	'n encryption algorithm.', 00H		; `string'
PUBLIC	?Set_Encryption@PKCS7_6_Output@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; PKCS7_6_Output::Set_Encryption
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\pkcs7\pkcs7_6_output.cpp
;	COMDAT ?Set_Encryption@PKCS7_6_Output@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Set_Encryption@PKCS7_6_Output@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; PKCS7_6_Output::Set_Encryption, COMDAT
; _strPassword$ = ecx
; _mode$ = eax

; 150  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR _this$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi

; 151  : 	unsigned	char*	_CEK;
; 152  : 	unsigned	int*	iCEK;
; 153  : 	unsigned	int		i = 0;
; 154  : 	unsigned	int		n;
; 155  : 
; 156  : 	//------------------
; 157  : 	//暗号モジュールの取得
; 158  : 	cCE = Get_Encryption(mode);

  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?Get_Encryption@PKCS7@@QAEPAVEncryption@@I@Z ; PKCS7::Get_Encryption
  00010	89 83 a4 05 00
	00		 mov	 DWORD PTR [ebx+1444], eax

; 159  : 
; 160  : 	//------------------
; 161  : 	//Password文字列のハッシュ値を、暗号鍵にする。
; 162  : 	_CEK	= new unsigned char [(cCE->szKey<32)?32:cCE->szKey];

  00016	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  0001c	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001f	73 05		 jae	 SHORT $LN5@Set_Encryp@2
  00021	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
$LN5@Set_Encryp@2:
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 163  : 	iCEK	= (unsigned	int*)_CEK;
; 164  : 	cSHA256.CalcHash(_CEK, (void *)strPassword->c_str(), strPassword->length());

  0002c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002f	83 c4 04	 add	 esp, 4
  00032	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00036	8b f8		 mov	 edi, eax
  00038	72 05		 jb	 SHORT $LN13@Set_Encryp@2
  0003a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003d	eb 03		 jmp	 SHORT $LN14@Set_Encryp@2
$LN13@Set_Encryp@2:
  0003f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
$LN14@Set_Encryp@2:
  00042	51		 push	 ecx
  00043	50		 push	 eax
  00044	57		 push	 edi
  00045	be 00 00 00 00	 mov	 esi, OFFSET ?cSHA256@PKCS7@@2VSHA256@@A ; PKCS7::cSHA256
  0004a	e8 00 00 00 00	 call	 ?CalcHash@Digest@@QAEXPAX0I@Z ; Digest::CalcHash

; 165  : 	while(i<8){
; 166  : 		n = iCEK[i];

  0004f	8b 07		 mov	 eax, DWORD PTR [edi]

; 167  : 		iCEK[i] = ((n>>24) & 0xFF) | ((n>>8) & 0xFF00) | ((n & 0xFF00)<<8) | ((n & 0xFF)<<24);

  00051	8b c8		 mov	 ecx, eax
  00053	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00059	8b d0		 mov	 edx, eax
  0005b	c1 ea 10	 shr	 edx, 16			; 00000010H
  0005e	0b ca		 or	 ecx, edx
  00060	c1 e9 08	 shr	 ecx, 8
  00063	8b d0		 mov	 edx, eax
  00065	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  0006b	c1 e0 10	 shl	 eax, 16			; 00000010H
  0006e	0b d0		 or	 edx, eax
  00070	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00073	c1 e2 08	 shl	 edx, 8
  00076	0b ca		 or	 ecx, edx
  00078	89 0f		 mov	 DWORD PTR [edi], ecx
  0007a	8b c8		 mov	 ecx, eax
  0007c	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00082	8b d0		 mov	 edx, eax
  00084	c1 ea 10	 shr	 edx, 16			; 00000010H
  00087	0b ca		 or	 ecx, edx
  00089	c1 e9 08	 shr	 ecx, 8
  0008c	8b d0		 mov	 edx, eax
  0008e	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00094	c1 e0 10	 shl	 eax, 16			; 00000010H
  00097	0b d0		 or	 edx, eax
  00099	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0009c	c1 e2 08	 shl	 edx, 8
  0009f	0b ca		 or	 ecx, edx
  000a1	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  000a4	8b c8		 mov	 ecx, eax
  000a6	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  000ac	8b d0		 mov	 edx, eax
  000ae	c1 ea 10	 shr	 edx, 16			; 00000010H
  000b1	0b ca		 or	 ecx, edx
  000b3	c1 e9 08	 shr	 ecx, 8
  000b6	8b d0		 mov	 edx, eax
  000b8	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  000be	c1 e0 10	 shl	 eax, 16			; 00000010H
  000c1	0b d0		 or	 edx, eax
  000c3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000c6	c1 e2 08	 shl	 edx, 8
  000c9	0b ca		 or	 ecx, edx
  000cb	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  000ce	8b c8		 mov	 ecx, eax
  000d0	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  000d6	8b d0		 mov	 edx, eax
  000d8	c1 ea 10	 shr	 edx, 16			; 00000010H
  000db	0b ca		 or	 ecx, edx
  000dd	8b d0		 mov	 edx, eax
  000df	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  000e5	c1 e9 08	 shr	 ecx, 8
  000e8	c1 e0 10	 shl	 eax, 16			; 00000010H
  000eb	0b d0		 or	 edx, eax
  000ed	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000f0	c1 e2 08	 shl	 edx, 8
  000f3	0b ca		 or	 ecx, edx
  000f5	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  000f8	8b c8		 mov	 ecx, eax
  000fa	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00100	8b d0		 mov	 edx, eax
  00102	c1 ea 10	 shr	 edx, 16			; 00000010H
  00105	0b ca		 or	 ecx, edx
  00107	8b d0		 mov	 edx, eax
  00109	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  0010f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00112	0b d0		 or	 edx, eax
  00114	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00117	c1 e9 08	 shr	 ecx, 8
  0011a	c1 e2 08	 shl	 edx, 8
  0011d	0b ca		 or	 ecx, edx
  0011f	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00122	8b c8		 mov	 ecx, eax
  00124	8b d0		 mov	 edx, eax
  00126	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  0012c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0012f	0b ca		 or	 ecx, edx
  00131	c1 e9 08	 shr	 ecx, 8
  00134	8b d0		 mov	 edx, eax
  00136	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  0013c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0013f	0b d0		 or	 edx, eax
  00141	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00144	c1 e2 08	 shl	 edx, 8
  00147	0b ca		 or	 ecx, edx
  00149	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  0014c	8b c8		 mov	 ecx, eax
  0014e	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00154	8b d0		 mov	 edx, eax
  00156	c1 ea 10	 shr	 edx, 16			; 00000010H
  00159	0b ca		 or	 ecx, edx
  0015b	8b d0		 mov	 edx, eax
  0015d	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00163	c1 e9 08	 shr	 ecx, 8
  00166	c1 e0 10	 shl	 eax, 16			; 00000010H
  00169	0b d0		 or	 edx, eax
  0016b	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0016e	c1 e2 08	 shl	 edx, 8
  00171	0b ca		 or	 ecx, edx
  00173	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
  00176	8b c8		 mov	 ecx, eax
  00178	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  0017e	8b d0		 mov	 edx, eax
  00180	c1 ea 10	 shr	 edx, 16			; 00000010H
  00183	0b ca		 or	 ecx, edx
  00185	8b d0		 mov	 edx, eax
  00187	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  0018d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00190	0b d0		 or	 edx, eax
  00192	c1 e9 08	 shr	 ecx, 8
  00195	c1 e2 08	 shl	 edx, 8
  00198	0b ca		 or	 ecx, edx
  0019a	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx

; 168  : 		i++;
; 169  : 	}
; 170  : 
; 171  : 	CEK.Set((char *)_CEK, cCE->szKey);

  0019d	8b 83 a4 05 00
	00		 mov	 eax, DWORD PTR [ebx+1444]
  001a3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001a9	51		 push	 ecx
  001aa	57		 push	 edi
  001ab	8d 8b ec 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1516]
  001b1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 172  : 	delete	_CEK;

  001b6	57		 push	 edi
  001b7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001bc	83 c4 04	 add	 esp, 4

; 173  : 
; 174  : }

  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx
  001c2	59		 pop	 ecx
  001c3	c2 04 00	 ret	 4
?Set_Encryption@PKCS7_6_Output@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; PKCS7_6_Output::Set_Encryption
PUBLIC	?Set_EncryptedData@PKCS7_6_Output@@QAEXPAVObjectIdentifier@@PAVEncryption@@I@Z ; PKCS7_6_Output::Set_EncryptedData
; Function compile flags: /Ogtpy
;	COMDAT ?Set_EncryptedData@PKCS7_6_Output@@QAEXPAVObjectIdentifier@@PAVEncryption@@I@Z
_TEXT	SEGMENT
$T96876 = -4						; size = 4
?Set_EncryptedData@PKCS7_6_Output@@QAEXPAVObjectIdentifier@@PAVEncryption@@I@Z PROC ; PKCS7_6_Output::Set_EncryptedData, COMDAT
; _this$ = esi
; __algorithm$ = ecx
; __szContent$ = eax

; 45   : {

  00000	83 ec 08	 sub	 esp, 8
  00003	57		 push	 edi

; 46   : 	//------
; 47   : 	//処理
; 48   : 	encrypted_data.Set(_type, _algorithm, _szContent);

  00004	50		 push	 eax
  00005	51		 push	 ecx
  00006	8d be 24 04 00
	00		 lea	 edi, DWORD PTR [esi+1060]
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 ?Set@EncryptedData@@QAEXPAVObjectIdentifier@@PAVEncryption@@I@Z ; EncryptedData::Set

; 49   : 	context.Set_Construct(&encrypted_data);		//ContentInfoクラスのmember

  00012	8d 54 24 08	 lea	 edx, DWORD PTR $T96876[esp+12]
  00016	89 7c 24 08	 mov	 DWORD PTR $T96876[esp+12], edi
  0001a	52		 push	 edx
  0001b	8d be c8 00 00
	00		 lea	 edi, DWORD PTR [esi+200]
  00021	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 50   : 	Set_Type(EncryptedData_type);

  00026	6a 06		 push	 6
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?Set_Type@PKCS7@@QAEXI@Z ; PKCS7::Set_Type

; 51   : }

  0002e	5f		 pop	 edi
  0002f	83 c4 08	 add	 esp, 8
  00032	c3		 ret	 0
?Set_EncryptedData@PKCS7_6_Output@@QAEXPAVObjectIdentifier@@PAVEncryption@@I@Z ENDP ; PKCS7_6_Output::Set_EncryptedData
PUBLIC	??1PKCS7_6_Output@@UAE@XZ			; PKCS7_6_Output::~PKCS7_6_Output
; Function compile flags: /Ogtpy
;	COMDAT ??1PKCS7_6_Output@@UAE@XZ
_TEXT	SEGMENT
??1PKCS7_6_Output@@UAE@XZ PROC				; PKCS7_6_Output::~PKCS7_6_Output, COMDAT
; _this$ = eax

; 25   : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax
  00003	8b 86 c8 fd ff
	ff		 mov	 eax, DWORD PTR [esi-568]
  00009	c7 86 f8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR [esi-1544], OFFSET ??_7PKCS7_6_Output@@6BPKCS7@@@
  00013	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00016	57		 push	 edi

; 26   : }

  00017	8d 7e a0	 lea	 edi, DWORD PTR [esi-96]
  0001a	c7 84 31 c8 fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR [ecx+esi-568], OFFSET ??_7PKCS7_6_Output@@6BBER_Output@@@
  00025	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  0002b	83 7f 5c 10	 cmp	 DWORD PTR [edi+92], 16	; 00000010H
  0002f	72 0c		 jb	 SHORT $LN24@PKCS7_6_Ou
  00031	8b 57 48	 mov	 edx, DWORD PTR [edi+72]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN24@PKCS7_6_Ou:
  0003d	33 c0		 xor	 eax, eax
  0003f	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  00046	89 47 58	 mov	 DWORD PTR [edi+88], eax
  00049	88 47 48	 mov	 BYTE PTR [edi+72], al
  0004c	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00051	81 c6 1c fe ff
	ff		 add	 esi, -484		; fffffe1cH
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ??1EncryptedData@@QAE@XZ ; EncryptedData::~EncryptedData
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??1PKCS7_Output@@UAE@XZ	; PKCS7_Output::~PKCS7_Output
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	c3		 ret	 0
??1PKCS7_6_Output@@UAE@XZ ENDP				; PKCS7_6_Output::~PKCS7_6_Output
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_DPKCS7_6_Output@@QAEXXZ
_TEXT	SEGMENT
??_DPKCS7_6_Output@@QAEXXZ PROC				; PKCS7_6_Output::`vbase destructor', COMDAT
; _this$ = eax
  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax
  00003	81 c6 08 06 00
	00		 add	 esi, 1544		; 00000608H
  00009	8b c6		 mov	 eax, esi
  0000b	e8 00 00 00 00	 call	 ??1PKCS7_6_Output@@UAE@XZ ; PKCS7_6_Output::~PKCS7_6_Output
  00010	56		 push	 esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00017	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
??_DPKCS7_6_Output@@QAEXXZ ENDP				; PKCS7_6_Output::`vbase destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GPKCS7_6_Output@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPKCS7_6_Output@@UAEPAXI@Z PROC			; PKCS7_6_Output::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d b9 f8 f9 ff
	ff		 lea	 edi, DWORD PTR [ecx-1544]
  00008	8d b7 08 06 00
	00		 lea	 esi, DWORD PTR [edi+1544]
  0000e	8b c6		 mov	 eax, esi
  00010	e8 00 00 00 00	 call	 ??1PKCS7_6_Output@@UAE@XZ ; PKCS7_6_Output::~PKCS7_6_Output
  00015	56		 push	 esi
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0001c	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00021	83 c4 04	 add	 esp, 4
  00024	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00029	74 09		 je	 SHORT $LN11@scalar@31
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN11@scalar@31:
  00034	8b c7		 mov	 eax, edi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	c2 04 00	 ret	 4
??_GPKCS7_6_Output@@UAEPAXI@Z ENDP			; PKCS7_6_Output::`scalar deleting destructor'
PUBLIC	??0PKCS7_6_Output@@QAE@PBD@Z			; PKCS7_6_Output::PKCS7_6_Output
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0PKCS7_6_Output@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PKCS7_6_Output@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0PKCS7_6_Output@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0PKCS7_6_Output@@QAE@PBD@Z$2
__ehfuncinfo$??0PKCS7_6_Output@@QAE@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0PKCS7_6_Output@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\pkcs7\pkcs7_6_output.cpp
xdata$x	ENDS
;	COMDAT ??0PKCS7_6_Output@@QAE@PBD@Z
_TEXT	SEGMENT
$T100670 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_strFileName$ = 12					; size = 4
??0PKCS7_6_Output@@QAE@PBD@Z PROC			; PKCS7_6_Output::PKCS7_6_Output, COMDAT

; 14   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0PKCS7_6_Output@@QAE@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b 74 24 28	 mov	 esi, DWORD PTR _this$[esp+32]
  0002a	33 db		 xor	 ebx, ebx
  0002c	89 5c 24 14	 mov	 DWORD PTR $T100670[esp+36], ebx
  00030	c7 86 d0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+976], OFFSET ??_8PKCS7_6_Output@@7B@
  0003a	c7 86 08 06 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1544], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00044	8b 44 24 2c	 mov	 eax, DWORD PTR _strFileName$[esp+32]
  00048	50		 push	 eax
  00049	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  0004d	bf 01 00 00 00	 mov	 edi, 1
  00052	56		 push	 esi
  00053	89 7c 24 1c	 mov	 DWORD PTR $T100670[esp+44], edi
  00057	e8 00 00 00 00	 call	 ??0PKCS7_Output@@QAE@PBDQBD@Z ; PKCS7_Output::PKCS7_Output
  0005c	89 7c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], edi
  00060	8b 8e d0 03 00
	00		 mov	 ecx, DWORD PTR [esi+976]
  00066	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PKCS7_6_Output@@6BPKCS7@@@
  0006c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006f	8d 86 24 04 00
	00		 lea	 eax, DWORD PTR [esi+1060]
  00075	50		 push	 eax
  00076	c7 84 32 d0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+esi+976], OFFSET ??_7PKCS7_6_Output@@6BBER_Output@@@
  00081	e8 00 00 00 00	 call	 ??0EncryptedData@@QAE@QBD@Z ; EncryptedData::EncryptedData
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DHPBPBEA@Octet?5String?$AA@
  0008b	8d be a8 05 00
	00		 lea	 edi, DWORD PTR [esi+1448]
  00091	57		 push	 edi
  00092	c6 44 24 28 02	 mov	 BYTE PTR __$EHRec$[esp+52], 2
  00097	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  0009c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  000a2	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  000a9	89 5f 58	 mov	 DWORD PTR [edi+88], ebx
  000ac	88 5f 48	 mov	 BYTE PTR [edi+72], bl

; 15   : }

  000af	8b c6		 mov	 eax, esi
  000b1	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	83 c4 14	 add	 esp, 20			; 00000014H
  000c3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PKCS7_6_Output@@QAE@PBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T100670[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 12 00 00
	00		 je	 $LN5@PKCS7_6_Ou@2
  0000c	83 65 f0 fe	 and	 DWORD PTR $T100670[ebp], -2 ; fffffffeH
  00010	8b 4d 04	 mov	 ecx, DWORD PTR _this$[ebp-4]
  00013	81 c1 08 06 00
	00		 add	 ecx, 1544		; 00000608H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@PKCS7_6_Ou@2:
  0001e	c3		 ret	 0
__unwindfunclet$??0PKCS7_6_Output@@QAE@PBD@Z$1:
  0001f	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00022	05 24 04 00 00	 add	 eax, 1060		; 00000424H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??1PKCS7_Output@@UAE@XZ	; PKCS7_Output::~PKCS7_Output
  0002d	c3		 ret	 0
__unwindfunclet$??0PKCS7_6_Output@@QAE@PBD@Z$2:
  0002e	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00031	05 24 04 00 00	 add	 eax, 1060		; 00000424H
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??1EncryptedData@@QAE@XZ ; EncryptedData::~EncryptedData
  0003c	c3		 ret	 0
__ehhandler$??0PKCS7_6_Output@@QAE@PBD@Z:
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00044	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PKCS7_6_Output@@QAE@PBD@Z
  00053	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PKCS7_6_Output@@QAE@PBD@Z ENDP			; PKCS7_6_Output::PKCS7_6_Output
PUBLIC	?encrypt@PKCS7_6_Output@@QAEXPAVFileInput@@PAVObjectIdentifier@@@Z ; PKCS7_6_Output::encrypt
; Function compile flags: /Ogtpy
;	COMDAT ?encrypt@PKCS7_6_Output@@QAEXPAVFileInput@@PAVObjectIdentifier@@@Z
_TEXT	SEGMENT
$T101295 = 8						; size = 4
_f_Plain$ = 8						; size = 4
?encrypt@PKCS7_6_Output@@QAEXPAVFileInput@@PAVObjectIdentifier@@@Z PROC ; PKCS7_6_Output::encrypt, COMDAT
; _this$ = eax

; 188  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _f_Plain$[esp+4]
  00006	56		 push	 esi
  00007	8b f0		 mov	 esi, eax
  00009	57		 push	 edi

; 189  : 
; 190  : 	//------------------
; 191  : 	//PKCS#7-6 のオブジェクト作成
; 192  : 	Set_EncryptedData(contentType, cCE, f_Plain->GetSize());

  0000a	8b c5		 mov	 eax, ebp
  0000c	e8 00 00 00 00	 call	 ?GetSize@FileInput@@QAEIXZ ; FileInput::GetSize
  00011	50		 push	 eax
  00012	8b 86 a4 05 00
	00		 mov	 eax, DWORD PTR [esi+1444]
  00018	50		 push	 eax
  00019	8d be 24 04 00
	00		 lea	 edi, DWORD PTR [esi+1060]
  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ?Set@EncryptedData@@QAEXPAVObjectIdentifier@@PAVEncryption@@I@Z ; EncryptedData::Set
  00025	8d 4c 24 14	 lea	 ecx, DWORD PTR $T101295[esp+12]
  00029	89 7c 24 14	 mov	 DWORD PTR $T101295[esp+12], edi
  0002d	51		 push	 ecx
  0002e	8d be c8 00 00
	00		 lea	 edi, DWORD PTR [esi+200]
  00034	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back
  00039	6a 06		 push	 6
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ?Set_Type@PKCS7@@QAEXI@Z ; PKCS7::Set_Type

; 193  : 
; 194  : 	//------------------
; 195  : 	//暗号ファイルの出力
; 196  : 
; 197  : 	//暗号文本体まで
; 198  : 	write_header();

  00041	8b 16		 mov	 edx, DWORD PTR [esi]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b ce		 mov	 ecx, esi
  00047	ff d0		 call	 eax
  00049	8b 16		 mov	 edx, DWORD PTR [esi]
  0004b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004e	8b ce		 mov	 ecx, esi
  00050	ff d0		 call	 eax
  00052	8b 16		 mov	 edx, DWORD PTR [esi]
  00054	8b d8		 mov	 ebx, eax
  00056	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00059	8b ce		 mov	 ecx, esi
  0005b	ff d0		 call	 eax
  0005d	53		 push	 ebx
  0005e	50		 push	 eax
  0005f	8d be d0 03 00
	00		 lea	 edi, DWORD PTR [esi+976]
  00065	57		 push	 edi
  00066	e8 00 00 00 00	 call	 ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z ; std::basic_ostream<char,std::char_traits<char> >::write

; 199  : 
; 200  : 	//暗号文本体
; 201  : 	encrypted_data.encryptedContentInfo.encrypt((unsigned char*)CEK.strValue.c_str(), f_Plain, this);

  0006b	83 be 04 06 00
	00 10		 cmp	 DWORD PTR [esi+1540], 16 ; 00000010H
  00072	72 08		 jb	 SHORT $LN17@encrypt@3
  00074	8b 96 f0 05 00
	00		 mov	 edx, DWORD PTR [esi+1520]
  0007a	eb 06		 jmp	 SHORT $LN18@encrypt@3
$LN17@encrypt@3:
  0007c	8d 96 f0 05 00
	00		 lea	 edx, DWORD PTR [esi+1520]
$LN18@encrypt@3:
  00082	57		 push	 edi
  00083	81 c6 b0 04 00
	00		 add	 esi, 1200		; 000004b0H
  00089	8b fd		 mov	 edi, ebp
  0008b	e8 00 00 00 00	 call	 ?encrypt@EncryptedContentInfo@@QAEHPAEPAVFileInput@@PAVFileOutput@@@Z ; EncryptedContentInfo::encrypt

; 202  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx
  00094	c2 04 00	 ret	 4
?encrypt@PKCS7_6_Output@@QAEXPAVFileInput@@PAVObjectIdentifier@@@Z ENDP ; PKCS7_6_Output::encrypt
_TEXT	ENDS
PUBLIC	?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Output@@I@Z ; PKCS7_6_Output::Set_Encryption
; Function compile flags: /Ogtpy
;	COMDAT ?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Output@@I@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Output@@I@Z PROC ; PKCS7_6_Output::Set_Encryption, COMDAT
; _f_KEY$ = ecx
; _mode$ = eax

; 67   : {

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _this$[esp]
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	57		 push	 edi

; 68   : 	unsigned	char*	_CEK;
; 69   : 
; 70   : 	//------------------
; 71   : 	//暗号モジュールの取得
; 72   : 	cCE = Get_Encryption(mode);

  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?Get_Encryption@PKCS7@@QAEPAVEncryption@@I@Z ; PKCS7::Get_Encryption
  00010	89 83 a4 05 00
	00		 mov	 DWORD PTR [ebx+1444], eax

; 73   : 
; 74   : 	//------------------
; 75   : 	//鍵は乱数より自動生成
; 76   : 	_CEK	= new unsigned char [(cCE->szKey<32)?32:cCE->szKey];

  00016	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  0001c	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001f	73 05		 jae	 SHORT $LN3@Set_Encryp@3
  00021	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
$LN3@Set_Encryp@3:
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0002c	8b f8		 mov	 edi, eax

; 77   : 
; 78   : 	cRandom->get256(_CEK);

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cRandom@@3PAVMT_SHA@@A ; cRandom
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	8b e8		 mov	 ebp, eax
  00039	e8 00 00 00 00	 call	 ?generate@MT_SHA@@QAEXXZ ; MT_SHA::generate
  0003e	8b 95 c4 09 00
	00		 mov	 edx, DWORD PTR [ebp+2500]
  00044	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00047	8d 8d c4 09 00
	00		 lea	 ecx, DWORD PTR [ebp+2500]
  0004d	57		 push	 edi
  0004e	ff d0		 call	 eax

; 79   : 	CEK.Set((char *)_CEK, cCE->szKey);

  00050	8b 8b a4 05 00
	00		 mov	 ecx, DWORD PTR [ebx+1444]
  00056	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0005c	52		 push	 edx
  0005d	57		 push	 edi
  0005e	8d 8b ec 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1516]
  00064	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 80   : 
; 81   : 	//鍵を*.keyファイルに保存
; 82   : 	f_KEY->Set(cCE, (char *)_CEK, cCE->szKey);

  00069	8b 9b a4 05 00
	00		 mov	 ebx, DWORD PTR [ebx+1444]
  0006f	8b 83 a4 00 00
	00		 mov	 eax, DWORD PTR [ebx+164]
  00075	50		 push	 eax
  00076	57		 push	 edi
  00077	53		 push	 ebx
  00078	8b c6		 mov	 eax, esi
  0007a	e8 00 00 00 00	 call	 ?Set@PrivateKeyInfo@@QAEXPAVAlgorithmIdentifier@@QADI@Z ; PrivateKeyInfo::Set

; 83   : 	f_KEY->encodeBER_to_File();

  0007f	8b 16		 mov	 edx, DWORD PTR [esi]
  00081	8b 02		 mov	 eax, DWORD PTR [edx]
  00083	8b ce		 mov	 ecx, esi
  00085	ff d0		 call	 eax
  00087	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  0008b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0008e	72 05		 jb	 SHORT $LN17@Set_Encryp@3
  00090	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00093	eb 03		 jmp	 SHORT $LN18@Set_Encryp@3
$LN17@Set_Encryp@3:
  00095	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
$LN18@Set_Encryp@3:
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	81 c6 f0 00 00
	00		 add	 esi, 240		; 000000f0H
  000a0	56		 push	 esi
  000a1	e8 00 00 00 00	 call	 ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z ; std::basic_ostream<char,std::char_traits<char> >::write

; 84   : 
; 85   : 	delete	_CEK;

  000a6	57		 push	 edi
  000a7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ac	83 c4 04	 add	 esp, 4

; 86   : 
; 87   : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5d		 pop	 ebp
  000b2	5b		 pop	 ebx
  000b3	c2 04 00	 ret	 4
?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Output@@I@Z ENDP ; PKCS7_6_Output::Set_Encryption
PUBLIC	__$ArrayPad$
PUBLIC	?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Input@@@Z ; PKCS7_6_Output::Set_Encryption
; Function compile flags: /Ogtpy
;	COMDAT ?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Input@@@Z
_TEXT	SEGMENT
__IV$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_f_KEY$ = 8						; size = 4
?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Input@@@Z PROC ; PKCS7_6_Output::Set_Encryption, COMDAT
; _this$ = edi

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	83 ec 28	 sub	 esp, 40			; 00000028H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 24	 mov	 DWORD PTR __$ArrayPad$[esp+40], eax
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _f_KEY$[ebp]
  00018	56		 push	 esi

; 101  : 				__m128i	_IV	= cRandom->get__m128i();

  00019	8d 74 24 10	 lea	 esi, DWORD PTR __IV$[esp+48]
  0001d	e8 00 00 00 00	 call	 ?get__m128i@MT_SHA@@QAE?AT__m128i@@XZ ; MT_SHA::get__m128i

; 102  : 	unsigned	char*	_CEK;
; 103  : 
; 104  : 	//------------------
; 105  : 	//暗号モジュールと、暗号鍵の準備
; 106  : 
; 107  : 	//鍵ファイルで、鍵とアルゴリズムを指定？
; 108  : 	f_KEY->Get_PrivateKeyInfo();

  00022	8b c3		 mov	 eax, ebx
  00024	e8 00 00 00 00	 call	 ?Get_PrivateKeyInfo@PKCS8_Input@@QAEXXZ ; PKCS8_Input::Get_PrivateKeyInfo

; 109  : 
; 110  : 	//暗号アルゴリズム ＆ 暗号利用モードは？
; 111  : 	//追加の暗号アルゴリズムがある場合は、ここに追加。
; 112  : 	if(cDES_CBC.Check_OID(&f_KEY->Algorithm) != -1){

  00029	8d b3 48 01 00
	00		 lea	 esi, DWORD PTR [ebx+328]
  0002f	56		 push	 esi
  00030	68 00 00 00 00	 push	 OFFSET ?cDES_CBC@PKCS7@@2VDES_CBC@@A ; PKCS7::cDES_CBC
  00035	e8 00 00 00 00	 call	 ?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z ; AlgorithmIdentifier::Check_OID
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	74 23		 je	 SHORT $LN10@Set_Encryp@4

; 113  : 		cDES_CBC.Set_DES(_IV.m128i_i64[0]);

  0003f	8b 44 24 14	 mov	 eax, DWORD PTR __IV$[esp+52]
  00043	8b 4c 24 10	 mov	 ecx, DWORD PTR __IV$[esp+48]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	68 00 00 00 00	 push	 OFFSET ?cDES_CBC@PKCS7@@2VDES_CBC@@A ; PKCS7::cDES_CBC
  0004e	e8 00 00 00 00	 call	 ?Set_DES@DES_CBC@@QAEX_K@Z ; DES_CBC::Set_DES

; 114  : 		cCE = &cDES_CBC;

  00053	c7 87 a4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1444], OFFSET ?cDES_CBC@PKCS7@@2VDES_CBC@@A ; PKCS7::cDES_CBC
  0005d	e9 b9 00 00 00	 jmp	 $LN1@Set_Encryp@4
$LN10@Set_Encryp@4:

; 115  : 	} else if(cTDES_CBC.Check_OID(&f_KEY->Algorithm) != -1){

  00062	56		 push	 esi
  00063	68 00 00 00 00	 push	 OFFSET ?cTDES_CBC@PKCS7@@2VDES_EDE3_CBC@@A ; PKCS7::cTDES_CBC
  00068	e8 00 00 00 00	 call	 ?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z ; AlgorithmIdentifier::Check_OID
  0006d	83 f8 ff	 cmp	 eax, -1
  00070	74 23		 je	 SHORT $LN8@Set_Encryp@4

; 116  : 		cTDES_CBC.Set_DES(_IV.m128i_i64[0]);

  00072	8b 54 24 14	 mov	 edx, DWORD PTR __IV$[esp+52]
  00076	8b 44 24 10	 mov	 eax, DWORD PTR __IV$[esp+48]
  0007a	52		 push	 edx
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ?cTDES_CBC@PKCS7@@2VDES_EDE3_CBC@@A ; PKCS7::cTDES_CBC
  00081	e8 00 00 00 00	 call	 ?Set_DES@DES_EDE3_CBC@@QAEX_K@Z ; DES_EDE3_CBC::Set_DES

; 117  : 		cCE = &cTDES_CBC;

  00086	c7 87 a4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1444], OFFSET ?cTDES_CBC@PKCS7@@2VDES_EDE3_CBC@@A ; PKCS7::cTDES_CBC
  00090	e9 86 00 00 00	 jmp	 $LN1@Set_Encryp@4
$LN8@Set_Encryp@4:

; 118  : 	} else if(cAES_CBC128.Check_OID(&f_KEY->Algorithm) != -1){

  00095	56		 push	 esi
  00096	68 00 00 00 00	 push	 OFFSET ?cAES_CBC128@PKCS7@@2VAES_CBC128@@A ; PKCS7::cAES_CBC128
  0009b	e8 00 00 00 00	 call	 ?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z ; AlgorithmIdentifier::Check_OID
  000a0	83 f8 ff	 cmp	 eax, -1
  000a3	74 1c		 je	 SHORT $LN6@Set_Encryp@4

; 119  : 		cAES_CBC128.Set_AES(_IV);

  000a5	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR __IV$[esp+48]
  000ab	68 00 00 00 00	 push	 OFFSET ?cAES_CBC128@PKCS7@@2VAES_CBC128@@A ; PKCS7::cAES_CBC128
  000b0	e8 00 00 00 00	 call	 ?Set_AES@AES_CBC@@QAEXT__m128i@@@Z ; AES_CBC::Set_AES

; 120  : 		cCE = &cAES_CBC128;

  000b5	c7 87 a4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1444], OFFSET ?cAES_CBC128@PKCS7@@2VAES_CBC128@@A ; PKCS7::cAES_CBC128
  000bf	eb 5a		 jmp	 SHORT $LN1@Set_Encryp@4
$LN6@Set_Encryp@4:

; 121  : 	} else if(cAES_CBC192.Check_OID(&f_KEY->Algorithm) != -1){

  000c1	56		 push	 esi
  000c2	68 00 00 00 00	 push	 OFFSET ?cAES_CBC192@PKCS7@@2VAES_CBC192@@A ; PKCS7::cAES_CBC192
  000c7	e8 00 00 00 00	 call	 ?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z ; AlgorithmIdentifier::Check_OID
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	74 1c		 je	 SHORT $LN4@Set_Encryp@4

; 122  : 		cAES_CBC192.Set_AES(_IV);

  000d1	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR __IV$[esp+48]
  000d7	68 00 00 00 00	 push	 OFFSET ?cAES_CBC192@PKCS7@@2VAES_CBC192@@A ; PKCS7::cAES_CBC192
  000dc	e8 00 00 00 00	 call	 ?Set_AES@AES_CBC@@QAEXT__m128i@@@Z ; AES_CBC::Set_AES

; 123  : 		cCE = &cAES_CBC128;

  000e1	c7 87 a4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1444], OFFSET ?cAES_CBC128@PKCS7@@2VAES_CBC128@@A ; PKCS7::cAES_CBC128
  000eb	eb 2e		 jmp	 SHORT $LN1@Set_Encryp@4
$LN4@Set_Encryp@4:

; 124  : 	} else if(cAES_CBC256.Check_OID(&f_KEY->Algorithm) != -1){

  000ed	56		 push	 esi
  000ee	68 00 00 00 00	 push	 OFFSET ?cAES_CBC256@PKCS7@@2VAES_CBC256@@A ; PKCS7::cAES_CBC256
  000f3	e8 00 00 00 00	 call	 ?Check_OID@AlgorithmIdentifier@@QAEHPAVObjectIdentifier@@@Z ; AlgorithmIdentifier::Check_OID
  000f8	83 f8 ff	 cmp	 eax, -1
  000fb	0f 84 ab 00 00
	00		 je	 $LN2@Set_Encryp@4

; 125  : 		cAES_CBC256.Set_AES(_IV);

  00101	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR __IV$[esp+48]
  00107	68 00 00 00 00	 push	 OFFSET ?cAES_CBC256@PKCS7@@2VAES_CBC256@@A ; PKCS7::cAES_CBC256
  0010c	e8 00 00 00 00	 call	 ?Set_AES@AES_CBC@@QAEXT__m128i@@@Z ; AES_CBC::Set_AES

; 126  : 		cCE = &cAES_CBC256;

  00111	c7 87 a4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1444], OFFSET ?cAES_CBC256@PKCS7@@2VAES_CBC256@@A ; PKCS7::cAES_CBC256
$LN1@Set_Encryp@4:

; 129  : 	}
; 130  : 
; 131  : 	//鍵取得
; 132  : 	_CEK	= new unsigned char [cCE->szKey];

  0011b	8b 8f a4 05 00
	00		 mov	 ecx, DWORD PTR [edi+1444]
  00121	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0012d	8b f0		 mov	 esi, eax

; 133  : 	f_KEY->Get_PrivateKey(_CEK, cCE->szKey);

  0012f	8b 87 a4 05 00
	00		 mov	 eax, DWORD PTR [edi+1444]
  00135	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  0013b	83 c4 04	 add	 esp, 4
  0013e	39 83 e8 00 00
	00		 cmp	 DWORD PTR [ebx+232], eax
  00144	74 0f		 je	 SHORT $LN13@Set_Encryp@4
  00146	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@FMHIPPHM@?3?5unmatch?5key?5size?4?$AA@
  0014b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03CCEPDEKL@Key?$AA@
  00150	e8 00 00 00 00	 call	 ?errPrint@@YAXPBD0@Z	; errPrint
$LN28@Set_Encryp@4:
$LN13@Set_Encryp@4:
  00155	83 bb ec 00 00
	00 10		 cmp	 DWORD PTR [ebx+236], 16	; 00000010H
  0015c	72 08		 jb	 SHORT $LN22@Set_Encryp@4
  0015e	8b 9b d8 00 00
	00		 mov	 ebx, DWORD PTR [ebx+216]
  00164	eb 06		 jmp	 SHORT $LN23@Set_Encryp@4
$LN22@Set_Encryp@4:
  00166	81 c3 d8 00 00
	00		 add	 ebx, 216		; 000000d8H
$LN23@Set_Encryp@4:
  0016c	50		 push	 eax
  0016d	53		 push	 ebx
  0016e	56		 push	 esi
  0016f	e8 00 00 00 00	 call	 _memcpy

; 134  : 	CEK.Set((char *)_CEK, cCE->szKey);

  00174	8b 8f a4 05 00
	00		 mov	 ecx, DWORD PTR [edi+1444]
  0017a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH
  00183	52		 push	 edx
  00184	56		 push	 esi
  00185	8d 8f ec 05 00
	00		 lea	 ecx, DWORD PTR [edi+1516]
  0018b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 135  : 	delete	_CEK;

  00190	56		 push	 esi
  00191	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 136  : 
; 137  : }

  00196	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  0019a	83 c4 04	 add	 esp, 4
  0019d	5e		 pop	 esi
  0019e	5b		 pop	 ebx
  0019f	33 cc		 xor	 ecx, esp
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c2 04 00	 ret	 4
$LN2@Set_Encryp@4:

; 127  : 	} else {
; 128  : 		errPrint("",": Unknown encryption algorithm.");

  001ac	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CA@BPHDHPBC@?3?5Unknown?5encryption?5algorithm?4?$AA@
  001b1	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  001b6	e8 00 00 00 00	 call	 ?errPrint@@YAXPBD0@Z	; errPrint
$LN29@Set_Encryp@4:
$LN27@Set_Encryp@4:
  001bb	cc		 int	 3
?Set_Encryption@PKCS7_6_Output@@QAEXPAVPKCS8_Input@@@Z ENDP ; PKCS7_6_Output::Set_Encryption
END
