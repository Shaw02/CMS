; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\Algorithm\DES_EDE3_CBC.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?SetIV@DES_EDE3_CBC@@UAEXPAX@Z			; DES_EDE3_CBC::SetIV
PUBLIC	?decrypt@DES_EDE3_CBC@@UAEXPAX@Z		; DES_EDE3_CBC::decrypt
PUBLIC	?encrypt@DES_EDE3_CBC@@UAEXPAX@Z		; DES_EDE3_CBC::encrypt
PUBLIC	??_R4DES_EDE3_CBC@@6B@				; DES_EDE3_CBC::`RTTI Complete Object Locator'
PUBLIC	??_R3DES_EDE3_CBC@@8				; DES_EDE3_CBC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DES_EDE3_CBC@@8				; DES_EDE3_CBC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DES_EDE3_CBC@@8			; DES_EDE3_CBC::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDES_EDE3_CBC@@@8			; DES_EDE3_CBC `RTTI Type Descriptor'
PUBLIC	?init@DES_EDE3_CBC@@UAEXXZ			; DES_EDE3_CBC::init
PUBLIC	?oid@DES_EDE3_CBC@@2PAIA			; DES_EDE3_CBC::oid
PUBLIC	??_7DES_EDE3_CBC@@6B@				; DES_EDE3_CBC::`vftable'
;	COMDAT ??_7DES_EDE3_CBC@@6B@
CONST	SEGMENT
??_7DES_EDE3_CBC@@6B@ DD FLAT:??_R4DES_EDE3_CBC@@6B@	; DES_EDE3_CBC::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
	DD	FLAT:?Set_Key@DES_EDE3@@UAEXPAX@Z
	DD	FLAT:?Clear_Key@DES@@UAEXXZ
	DD	FLAT:?init@DES_EDE3_CBC@@UAEXXZ
	DD	FLAT:?encrypt@DES_EDE3_CBC@@UAEXPAX@Z
	DD	FLAT:?decrypt@DES_EDE3_CBC@@UAEXPAX@Z
	DD	FLAT:?encrypt_ecb@DES@@UAEXPAX@Z
	DD	FLAT:?decrypt_ecb@DES@@UAEXPAX@Z
	DD	FLAT:?SetIV@DES_EDE3_CBC@@UAEXPAX@Z
	DD	FLAT:?encipher@Encryption@@UAEXPAXI@Z
	DD	FLAT:?decipher@Encryption@@UAEXPAXI@Z
	DD	FLAT:?encipher_last@Encryption@@UAEHPAXI@Z
	DD	FLAT:?decipher_last@Encryption@@UAEHPAXI@Z
	DD	FLAT:?KeyWrap@Encryption@@UAEHPAXI@Z
	DD	FLAT:?KeyUnWrap@Encryption@@UAEHPAXI@Z
	DD	FLAT:?GetKey@Encryption@@UAEPAXXZ
	DD	FLAT:?GetEncrptedKey@Encryption@@UAEPAXXZ
CONST	ENDS
;	COMDAT ??_R4DES_EDE3_CBC@@6B@
rdata$r	SEGMENT
??_R4DES_EDE3_CBC@@6B@ DD 00H				; DES_EDE3_CBC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDES_EDE3_CBC@@@8
	DD	FLAT:??_R3DES_EDE3_CBC@@8
rdata$r	ENDS
;	COMDAT ??_R3DES_EDE3_CBC@@8
rdata$r	SEGMENT
??_R3DES_EDE3_CBC@@8 DD 00H				; DES_EDE3_CBC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	07H
	DD	FLAT:??_R2DES_EDE3_CBC@@8
rdata$r	ENDS
;	COMDAT ??_R2DES_EDE3_CBC@@8
rdata$r	SEGMENT
??_R2DES_EDE3_CBC@@8 DD FLAT:??_R1A@?0A@EA@DES_EDE3_CBC@@8 ; DES_EDE3_CBC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DES_EDE3@@8
	DD	FLAT:??_R1A@?0A@EA@DES@@8
	DD	FLAT:??_R1A@?0A@EA@Encryption@@8
	DD	FLAT:??_R1A@?0A@EA@AlgorithmIdentifier@@8
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DES_EDE3_CBC@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DES_EDE3_CBC@@8 DD FLAT:??_R0?AVDES_EDE3_CBC@@@8 ; DES_EDE3_CBC::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DES_EDE3_CBC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDES_EDE3_CBC@@@8
_DATA	SEGMENT
??_R0?AVDES_EDE3_CBC@@@8 DD FLAT:??_7type_info@@6B@	; DES_EDE3_CBC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDES_EDE3_CBC@@', 00H
?oid@DES_EDE3_CBC@@2PAIA DD 01H				; DES_EDE3_CBC::oid
	DD	02H
	DD	0348H
	DD	01bb8dH
	DD	03H
	DD	07H
; Function compile flags: /Ogtpy
; File i:\ìnïîìƒéj\my project\cms\cms\asn1\algorithm\des_ede3_cbc.cpp
;	COMDAT ?SetIV@DES_EDE3_CBC@@UAEXPAX@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?SetIV@DES_EDE3_CBC@@UAEXPAX@Z PROC			; DES_EDE3_CBC::SetIV, COMDAT
; _this$ = ecx

; 56   : 	unsigned __int64*	iData = (unsigned __int64*)data;
; 57   : 	vector = *iData;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _data$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 91 30 02 00
	00		 mov	 DWORD PTR [ecx+560], edx
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 81 34 02 00
	00		 mov	 DWORD PTR [ecx+564], eax

; 58   : }

  00015	c2 04 00	 ret	 4
?SetIV@DES_EDE3_CBC@@UAEXPAX@Z ENDP			; DES_EDE3_CBC::SetIV
PUBLIC	?initIV@DES_EDE3_CBC@@QAEXXZ			; DES_EDE3_CBC::initIV
; Function compile flags: /Ogtpy
;	COMDAT ?initIV@DES_EDE3_CBC@@QAEXXZ
_TEXT	SEGMENT
?initIV@DES_EDE3_CBC@@QAEXXZ PROC			; DES_EDE3_CBC::initIV, COMDAT
; _this$ = eax

; 69   : 	unsigned __int64*	cIV = (unsigned __int64*)IV.strValue.c_str();

  00000	83 b8 94 02 00
	00 10		 cmp	 DWORD PTR [eax+660], 16	; 00000010H
  00007	72 18		 jb	 SHORT $LN7@initIV
  00009	8b 88 80 02 00
	00		 mov	 ecx, DWORD PTR [eax+640]

; 70   : 
; 71   : 	vector	= *cIV;

  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 90 30 02 00
	00		 mov	 DWORD PTR [eax+560], edx
  00017	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001a	89 88 34 02 00
	00		 mov	 DWORD PTR [eax+564], ecx

; 72   : }

  00020	c3		 ret	 0

; 69   : 	unsigned __int64*	cIV = (unsigned __int64*)IV.strValue.c_str();

$LN7@initIV:

; 70   : 
; 71   : 	vector	= *cIV;

  00021	8b 90 80 02 00
	00		 mov	 edx, DWORD PTR [eax+640]
  00027	8d 88 80 02 00
	00		 lea	 ecx, DWORD PTR [eax+640]
  0002d	89 90 30 02 00
	00		 mov	 DWORD PTR [eax+560], edx
  00033	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00036	89 88 34 02 00
	00		 mov	 DWORD PTR [eax+564], ecx

; 72   : }

  0003c	c3		 ret	 0
?initIV@DES_EDE3_CBC@@QAEXXZ ENDP			; DES_EDE3_CBC::initIV
; Function compile flags: /Ogtpy
; File i:\ìnïîìƒéj\my project\cms\cms\asn1\algorithm\des_ede3_cbc.h
;	COMDAT ?init@DES_EDE3_CBC@@UAEXXZ
_TEXT	SEGMENT
?init@DES_EDE3_CBC@@UAEXXZ PROC				; DES_EDE3_CBC::init, COMDAT
; _this$ = ecx

; 43   : 			void	init(){initIV();};			//èâä˙âª

  00000	83 b9 94 02 00
	00 10		 cmp	 DWORD PTR [ecx+660], 16	; 00000010H
  00007	72 18		 jb	 SHORT $LN9@init
  00009	8b 81 80 02 00
	00		 mov	 eax, DWORD PTR [ecx+640]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	89 91 30 02 00
	00		 mov	 DWORD PTR [ecx+560], edx
  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001a	89 81 34 02 00
	00		 mov	 DWORD PTR [ecx+564], eax
  00020	c3		 ret	 0
$LN9@init:
  00021	8b 91 80 02 00
	00		 mov	 edx, DWORD PTR [ecx+640]
  00027	8d 81 80 02 00
	00		 lea	 eax, DWORD PTR [ecx+640]
  0002d	89 91 30 02 00
	00		 mov	 DWORD PTR [ecx+560], edx
  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	89 81 34 02 00
	00		 mov	 DWORD PTR [ecx+564], eax
  0003c	c3		 ret	 0
?init@DES_EDE3_CBC@@UAEXXZ ENDP				; DES_EDE3_CBC::init
; Function compile flags: /Ogtpy
; File i:\ìnïîìƒéj\my project\cms\cms\asn1\algorithm\des_ede3_cbc.cpp
;	COMDAT ?decrypt@DES_EDE3_CBC@@UAEXPAX@Z
_TEXT	SEGMENT
tv141 = -8						; size = 8
_data$ = 8						; size = 4
?decrypt@DES_EDE3_CBC@@UAEXPAX@Z PROC			; DES_EDE3_CBC::decrypt, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 99   : 	unsigned __int64*	iData	= (unsigned __int64*)data;
; 100  : 	unsigned __int64	temp	= InvCipher3(*iData) ^ vector;

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _data$[ebp]
  0000f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00012	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00014	50		 push	 eax
  00015	8b f1		 mov	 esi, ecx
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	89 44 24 20	 mov	 DWORD PTR tv141[esp+40], eax
  0001d	e8 00 00 00 00	 call	 ?InvCipher3@DES_EDE3@@QAE_K_K@Z ; DES_EDE3::InvCipher3
  00022	33 86 30 02 00
	00		 xor	 eax, DWORD PTR [esi+560]
  00028	33 96 34 02 00
	00		 xor	 edx, DWORD PTR [esi+564]

; 101  : 
; 102  : 	vector	= *iData;

  0002e	8b 4c 24 14	 mov	 ecx, DWORD PTR tv141[esp+28]
  00032	89 9e 30 02 00
	00		 mov	 DWORD PTR [esi+560], ebx
  00038	89 8e 34 02 00
	00		 mov	 DWORD PTR [esi+564], ecx

; 103  : 	*iData	= temp;

  0003e	89 07		 mov	 DWORD PTR [edi], eax
  00040	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 104  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?decrypt@DES_EDE3_CBC@@UAEXPAX@Z ENDP			; DES_EDE3_CBC::decrypt
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?encrypt@DES_EDE3_CBC@@UAEXPAX@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?encrypt@DES_EDE3_CBC@@UAEXPAX@Z PROC			; DES_EDE3_CBC::encrypt, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 83   : 	unsigned __int64*	iData	= (unsigned __int64*)data;
; 84   : 	unsigned __int64	temp	= Cipher3(*iData ^ vector);

  00008	8b 7d 08	 mov	 edi, DWORD PTR _data$[ebp]
  0000b	8b 07		 mov	 eax, DWORD PTR [edi]
  0000d	8b f1		 mov	 esi, ecx
  0000f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00012	33 8e 34 02 00
	00		 xor	 ecx, DWORD PTR [esi+564]
  00018	33 86 30 02 00
	00		 xor	 eax, DWORD PTR [esi+560]
  0001e	51		 push	 ecx
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?Cipher3@DES_EDE3@@QAE_K_K@Z ; DES_EDE3::Cipher3

; 85   : 
; 86   : 	vector	= temp;

  00026	89 86 30 02 00
	00		 mov	 DWORD PTR [esi+560], eax
  0002c	89 96 34 02 00
	00		 mov	 DWORD PTR [esi+564], edx

; 87   : 	*iData	= temp;

  00032	89 07		 mov	 DWORD PTR [edi], eax
  00034	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 88   : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?encrypt@DES_EDE3_CBC@@UAEXPAX@Z ENDP			; DES_EDE3_CBC::encrypt
PUBLIC	?Set_DES@DES_EDE3_CBC@@QAEX_K@Z			; DES_EDE3_CBC::Set_DES
; Function compile flags: /Ogtpy
;	COMDAT ?Set_DES@DES_EDE3_CBC@@QAEX_K@Z
_TEXT	SEGMENT
$T90704 = 8						; size = 4
$T91193 = 8						; size = 4
_this$ = 8						; size = 4
__IV$ = 12						; size = 8
?Set_DES@DES_EDE3_CBC@@QAEX_K@Z PROC			; DES_EDE3_CBC::Set_DES, COMDAT

; 114  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _this$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi

; 115  : 	//ASN.1ÇÃíËã`
; 116  : 	Set();

  00008	8d 7d 28	 lea	 edi, DWORD PTR [ebp+40]
  0000b	8b c7		 mov	 eax, edi
  0000d	e8 00 00 00 00	 call	 ?clear@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXXZ ; std::vector<ASN1 *,std::allocator<ASN1 *> >::clear
  00012	8d 4c 24 14	 lea	 ecx, DWORD PTR $T90704[esp+12]
  00016	8d 45 44	 lea	 eax, DWORD PTR [ebp+68]
  00019	51		 push	 ecx
  0001a	89 44 24 18	 mov	 DWORD PTR $T90704[esp+16], eax
  0001e	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 117  : 	vector = _IV;	//	SetIV()Ç∆ìØÇ∂à”ñ°ÅB

  00023	8b 44 24 1c	 mov	 eax, DWORD PTR __IV$[esp+16]
  00027	8b 54 24 18	 mov	 edx, DWORD PTR __IV$[esp+12]

; 118  : 	IV.Set((char*)&_IV,sizeof(_IV));

  0002b	8d b5 7c 02 00
	00		 lea	 esi, DWORD PTR [ebp+636]
  00031	89 95 30 02 00
	00		 mov	 DWORD PTR [ebp+560], edx
  00037	89 85 34 02 00
	00		 mov	 DWORD PTR [ebp+564], eax
  0003d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00040	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00043	83 f8 10	 cmp	 eax, 16			; 00000010H
  00046	72 04		 jb	 SHORT $LN56@Set_DES
  00048	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004a	eb 02		 jmp	 SHORT $LN57@Set_DES
$LN56@Set_DES:
  0004c	8b cb		 mov	 ecx, ebx
$LN57@Set_DES:
  0004e	8d 54 24 18	 lea	 edx, DWORD PTR __IV$[esp+12]
  00052	3b d1		 cmp	 edx, ecx
  00054	72 32		 jb	 SHORT $LN46@Set_DES
  00056	83 f8 10	 cmp	 eax, 16			; 00000010H
  00059	72 04		 jb	 SHORT $LN60@Set_DES
  0005b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0005d	eb 02		 jmp	 SHORT $LN61@Set_DES
$LN60@Set_DES:
  0005f	8b cb		 mov	 ecx, ebx
$LN61@Set_DES:
  00061	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00064	03 d1		 add	 edx, ecx
  00066	8d 4c 24 18	 lea	 ecx, DWORD PTR __IV$[esp+12]
  0006a	3b d1		 cmp	 edx, ecx
  0006c	76 1a		 jbe	 SHORT $LN46@Set_DES
  0006e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00071	72 02		 jb	 SHORT $LN64@Set_DES
  00073	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN64@Set_DES:
  00075	6a 08		 push	 8
  00077	8d 54 24 1c	 lea	 edx, DWORD PTR __IV$[esp+16]
  0007b	2b d3		 sub	 edx, ebx
  0007d	52		 push	 edx
  0007e	56		 push	 esi
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00086	eb 44		 jmp	 SHORT $LN134@Set_DES
$LN46@Set_DES:
  00088	83 f8 08	 cmp	 eax, 8
  0008b	73 0d		 jae	 SHORT $LN70@Set_DES
  0008d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00090	50		 push	 eax
  00091	6a 08		 push	 8
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN70@Set_DES:
  0009a	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0009d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000a0	72 04		 jb	 SHORT $LN118@Set_DES
  000a2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a4	eb 02		 jmp	 SHORT $LN119@Set_DES
$LN118@Set_DES:
  000a6	8b c3		 mov	 eax, ebx
$LN119@Set_DES:
  000a8	6a 08		 push	 8
  000aa	8d 54 24 1c	 lea	 edx, DWORD PTR __IV$[esp+16]
  000ae	52		 push	 edx
  000af	51		 push	 ecx
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _memcpy_s
  000b6	83 c4 10	 add	 esp, 16			; 00000010H
  000b9	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000bd	c7 46 14 08 00
	00 00		 mov	 DWORD PTR [esi+20], 8
  000c4	72 02		 jb	 SHORT $LN132@Set_DES
  000c6	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN132@Set_DES:
  000c8	c6 43 08 00	 mov	 BYTE PTR [ebx+8], 0
$LN134@Set_DES:

; 119  : 	Set_Construct(&IV);

  000cc	8d 44 24 14	 lea	 eax, DWORD PTR $T91193[esp+12]
  000d0	81 c5 38 02 00
	00		 add	 ebp, 568		; 00000238H
  000d6	50		 push	 eax
  000d7	89 6c 24 18	 mov	 DWORD PTR $T91193[esp+16], ebp
  000db	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVASN1@@V?$allocator@PAVASN1@@@std@@@std@@QAEXABQAVASN1@@@Z ; std::vector<ASN1 *,std::allocator<ASN1 *> >::push_back

; 120  : }

  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5d		 pop	 ebp
  000e3	5b		 pop	 ebx
  000e4	c2 0c 00	 ret	 12			; 0000000cH
?Set_DES@DES_EDE3_CBC@@QAEX_K@Z ENDP			; DES_EDE3_CBC::Set_DES
_TEXT	ENDS
PUBLIC	??1DES_EDE3_CBC@@QAE@XZ				; DES_EDE3_CBC::~DES_EDE3_CBC
; Function compile flags: /Ogtpy
;	COMDAT ??1DES_EDE3_CBC@@QAE@XZ
_TEXT	SEGMENT
??1DES_EDE3_CBC@@QAE@XZ PROC				; DES_EDE3_CBC::~DES_EDE3_CBC, COMDAT
; _this$ = esi

; 44   : {

  00000	53		 push	 ebx
  00001	57		 push	 edi

; 45   : }

  00002	8d be 38 02 00
	00		 lea	 edi, DWORD PTR [esi+568]
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7DES_EDE3_CBC@@6B@
  0000e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  00014	83 7f 5c 10	 cmp	 DWORD PTR [edi+92], 16	; 00000010H
  00018	72 0c		 jb	 SHORT $LN21@DES_EDE3_C
  0001a	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 04	 add	 esp, 4
$LN21@DES_EDE3_C:
  00026	33 db		 xor	 ebx, ebx
  00028	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  0002f	89 5f 58	 mov	 DWORD PTR [edi+88], ebx
  00032	88 5f 48	 mov	 BYTE PTR [edi+72], bl
  00035	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  0003a	8d 7e 44	 lea	 edi, DWORD PTR [esi+68]
  0003d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AlgorithmIdentifier@@6B@
  00043	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ObjectIdentifier@@6B@
  00049	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  0004c	3b c3		 cmp	 eax, ebx
  0004e	74 09		 je	 SHORT $LN48@DES_EDE3_C
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$LN48@DES_EDE3_C:
  00059	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  0005c	51		 push	 ecx
  0005d	89 5f 50	 mov	 DWORD PTR [edi+80], ebx
  00060	89 5f 54	 mov	 DWORD PTR [edi+84], ebx
  00063	89 5f 58	 mov	 DWORD PTR [edi+88], ebx
  00066	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006b	83 c4 04	 add	 esp, 4
  0006e	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00073	8b fe		 mov	 edi, esi
  00075	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sequence@@6B@
  0007b	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00080	5f		 pop	 edi
  00081	5b		 pop	 ebx
  00082	c3		 ret	 0
??1DES_EDE3_CBC@@QAE@XZ ENDP				; DES_EDE3_CBC::~DES_EDE3_CBC
PUBLIC	??0DES_EDE3_CBC@@QAE@QBD@Z			; DES_EDE3_CBC::DES_EDE3_CBC
;	COMDAT xdata$x
; File i:\ìnïîìƒéj\my project\cms\cms\asn1\algorithm\algorithmidentifier.cpp
xdata$x	SEGMENT
__unwindtable$??0DES_EDE3_CBC@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DES_EDE3_CBC@@QAE@QBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DES_EDE3_CBC@@QAE@QBD@Z$1
__ehfuncinfo$??0DES_EDE3_CBC@@QAE@QBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0DES_EDE3_CBC@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\ìnïîìƒéj\my project\cms\cms\asn1\algorithm\des_ede3_cbc.cpp
xdata$x	ENDS
;	COMDAT ??0DES_EDE3_CBC@@QAE@QBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0DES_EDE3_CBC@@QAE@QBD@Z PROC				; DES_EDE3_CBC::DES_EDE3_CBC, COMDAT

; 16   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0DES_EDE3_CBC@@QAE@QBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 74 24 1c	 mov	 esi, DWORD PTR _this$[esp+20]
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MLDFENGJ@DES?9EDE3?9CBC?$AA@
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ??0AlgorithmIdentifier@@QAE@QBD@Z ; AlgorithmIdentifier::AlgorithmIdentifier
  00031	c7 86 a0 00 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+160], 8
  0003b	c7 86 a4 00 00
	00 18 00 00 00	 mov	 DWORD PTR [esi+164], 24	; 00000018H
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DHPBPBEA@Octet?5String?$AA@
  0004a	8d be 38 02 00
	00		 lea	 edi, DWORD PTR [esi+568]
  00050	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00058	57		 push	 edi
  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7DES_EDE3_CBC@@6B@
  0005f	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  00064	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  0006a	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  00071	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00078	c6 47 48 00	 mov	 BYTE PTR [edi+72], 0
  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	88 44 24 14	 mov	 BYTE PTR __$EHRec$[esp+32], al

; 17   : 	mode	= CBC;
; 18   : 	Set_oid(oid,sizeof(oid)/sizeof(int));

  00085	6a 06		 push	 6
  00087	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax
  0008d	68 00 00 00 00	 push	 OFFSET ?oid@DES_EDE3_CBC@@2PAIA ; DES_EDE3_CBC::oid
  00092	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  00095	e8 00 00 00 00	 call	 ?Set@ObjectIdentifier@@QAEXQAII@Z ; ObjectIdentifier::Set

; 19   : }

  0009a	8b c6		 mov	 eax, esi
  0009c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DES_EDE3_CBC@@QAE@QBD@Z$0:
  00000	8b 75 04	 mov	 esi, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1DES_EDE3@@QAE@XZ	; DES_EDE3::~DES_EDE3
__unwindfunclet$??0DES_EDE3_CBC@@QAE@QBD@Z$1:
  00008	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  0000b	05 38 02 00 00	 add	 eax, 568		; 00000238H
  00010	e9 00 00 00 00	 jmp	 ??1OctetString@@QAE@XZ	; OctetString::~OctetString
__ehhandler$??0DES_EDE3_CBC@@QAE@QBD@Z:
  00015	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00019	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0001c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0DES_EDE3_CBC@@QAE@QBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0DES_EDE3_CBC@@QAE@QBD@Z ENDP				; DES_EDE3_CBC::DES_EDE3_CBC
END
