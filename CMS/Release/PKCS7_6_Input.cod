; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\?n????j\My Project\CMS\CMS\ASN1\PKCS7\PKCS7_6_Input.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4PKCS7_6_Input@@6BBER_Input@@@		; PKCS7_6_Input::`RTTI Complete Object Locator'
PUBLIC	??_R4PKCS7_6_Input@@6BPKCS7@@@			; PKCS7_6_Input::`RTTI Complete Object Locator'
PUBLIC	??_R3PKCS7_6_Input@@8				; PKCS7_6_Input::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PKCS7_6_Input@@8				; PKCS7_6_Input::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PKCS7_6_Input@@8			; PKCS7_6_Input::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPKCS7_6_Input@@@8			; PKCS7_6_Input `RTTI Type Descriptor'
PUBLIC	??_DPKCS7_6_Input@@QAEXXZ			; PKCS7_6_Input::`vbase destructor'
PUBLIC	??_GPKCS7_6_Input@@UAEPAXI@Z			; PKCS7_6_Input::`scalar deleting destructor'
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	??_C@_0O@HPDALEOG@EncryptedData?$AA@		; `string'
PUBLIC	??_7PKCS7_6_Input@@6BPKCS7@@@			; PKCS7_6_Input::`vftable'
PUBLIC	??_7PKCS7_6_Input@@6BBER_Input@@@		; PKCS7_6_Input::`vftable'
PUBLIC	??_8PKCS7_6_Input@@7B@				; PKCS7_6_Input::`vbtable'
EXTRN	??_EPKCS7_6_Input@@UAEPAXI@Z:PROC		; PKCS7_6_Input::`vector deleting destructor'
;	COMDAT ??_8PKCS7_6_Input@@7B@
CONST	SEGMENT
??_8PKCS7_6_Input@@7B@ DD 00H				; PKCS7_6_Input::`vbtable'
	DD	023cH
CONST	ENDS
;	COMDAT ??_7PKCS7_6_Input@@6BBER_Input@@@
CONST	SEGMENT
??_7PKCS7_6_Input@@6BBER_Input@@@ DD FLAT:??_R4PKCS7_6_Input@@6BBER_Input@@@ ; PKCS7_6_Input::`vftable'
	DD	FLAT:??_EPKCS7_6_Input@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4PKCS7_6_Input@@6BBER_Input@@@
rdata$r	SEGMENT
??_R4PKCS7_6_Input@@6BBER_Input@@@ DD 00H		; PKCS7_6_Input::`RTTI Complete Object Locator'
	DD	060cH
	DD	00H
	DD	FLAT:??_R0?AVPKCS7_6_Input@@@8
	DD	FLAT:??_R3PKCS7_6_Input@@8
rdata$r	ENDS
;	COMDAT ??_7PKCS7_6_Input@@6BPKCS7@@@
CONST	SEGMENT
??_7PKCS7_6_Input@@6BPKCS7@@@ DD FLAT:??_R4PKCS7_6_Input@@6BPKCS7@@@ ; PKCS7_6_Input::`vftable'
	DD	FLAT:?encodeBER@Sequence@@UAEXXZ
	DD	FLAT:?Get_BERcode@ASN1@@UAEPBDXZ
	DD	FLAT:?Get_BERsize@ASN1@@UAEIXZ
CONST	ENDS
;	COMDAT ??_R4PKCS7_6_Input@@6BPKCS7@@@
rdata$r	SEGMENT
??_R4PKCS7_6_Input@@6BPKCS7@@@ DD 00H			; PKCS7_6_Input::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPKCS7_6_Input@@@8
	DD	FLAT:??_R3PKCS7_6_Input@@8
rdata$r	ENDS
;	COMDAT ??_R3PKCS7_6_Input@@8
rdata$r	SEGMENT
??_R3PKCS7_6_Input@@8 DD 00H				; PKCS7_6_Input::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0dH
	DD	FLAT:??_R2PKCS7_6_Input@@8
rdata$r	ENDS
;	COMDAT ??_R2PKCS7_6_Input@@8
rdata$r	SEGMENT
??_R2PKCS7_6_Input@@8 DD FLAT:??_R1A@?0A@EA@PKCS7_6_Input@@8 ; PKCS7_6_Input::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PKCS7_Input@@8
	DD	FLAT:??_R1DNA@?0A@EA@BER_Input@@8
	DD	FLAT:??_R1DNA@?0A@EA@FileInput@@8
	DD	FLAT:??_R1DNA@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1DNA@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@DNA@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@DNA@3EA@ios_base@std@@8
	DD	FLAT:??_R13DNA@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1A@?0A@EA@PKCS7@@8
	DD	FLAT:??_R1A@?0A@EA@ContentInfo@@8
	DD	FLAT:??_R1A@?0A@EA@Sequence@@8
	DD	FLAT:??_R1A@?0A@EA@ASN1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PKCS7_6_Input@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PKCS7_6_Input@@8 DD FLAT:??_R0?AVPKCS7_6_Input@@@8 ; PKCS7_6_Input::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PKCS7_6_Input@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPKCS7_6_Input@@@8
_DATA	SEGMENT
??_R0?AVPKCS7_6_Input@@@8 DD FLAT:??_7type_info@@6B@	; PKCS7_6_Input `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPKCS7_6_Input@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0O@HPDALEOG@EncryptedData?$AA@
CONST	SEGMENT
??_C@_0O@HPDALEOG@EncryptedData?$AA@ DB 'EncryptedData', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = eax

; 1661 : 		return (_Mysize);

  00000	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 1662 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?Set_Encryption@PKCS7_6_Input@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; PKCS7_6_Input::Set_Encryption
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\pkcs7\pkcs7_6_input.cpp
;	COMDAT ?Set_Encryption@PKCS7_6_Input@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Set_Encryption@PKCS7_6_Input@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; PKCS7_6_Input::Set_Encryption, COMDAT
; _strPassword$ = eax

; 78   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _this$[esp+4]

; 79   : 	Encryption*			cCE		= encrypted_data.encryptedContentInfo.contentEncryptionAlgorithm;

  00006	8b 9d fc 04 00
	00		 mov	 ebx, DWORD PTR [ebp+1276]
  0000c	56		 push	 esi
  0000d	8b f0		 mov	 esi, eax

; 80   : 	unsigned	char*	_CEK	= new unsigned char [cCE->szKey];

  0000f	8b 83 a4 00 00
	00		 mov	 eax, DWORD PTR [ebx+164]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 81   : 	unsigned	int*	iCEK	= (unsigned	int*)_CEK;
; 82   : 	unsigned	int		i = 0;
; 83   : 	unsigned	int		n;
; 84   : 
; 85   : 	//------------------
; 86   : 	//Password文字列のハッシュ値を、暗号鍵にする。
; 87   : 	cSHA256.CalcHash(_CEK, (void *)strPassword->c_str(), strPassword->length());

  0001c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0001f	83 c4 04	 add	 esp, 4
  00022	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00026	8b f8		 mov	 edi, eax
  00028	72 05		 jb	 SHORT $LN11@Set_Encryp
  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	eb 03		 jmp	 SHORT $LN12@Set_Encryp
$LN11@Set_Encryp:
  0002f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
$LN12@Set_Encryp:
  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	57		 push	 edi
  00035	be 00 00 00 00	 mov	 esi, OFFSET ?cSHA256@PKCS7@@2VSHA256@@A ; PKCS7::cSHA256
  0003a	e8 00 00 00 00	 call	 ?CalcHash@Digest@@QAEXPAX0I@Z ; Digest::CalcHash

; 88   : 
; 89   : 	while(i<8){
; 90   : 		n = iCEK[i];

  0003f	8b 07		 mov	 eax, DWORD PTR [edi]

; 91   : 		iCEK[i] = ((n>>24) & 0xFF) | ((n>>8) & 0xFF00) | ((n & 0xFF00)<<8) | ((n & 0xFF)<<24);

  00041	8b c8		 mov	 ecx, eax
  00043	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00049	8b d0		 mov	 edx, eax
  0004b	c1 ea 10	 shr	 edx, 16			; 00000010H
  0004e	0b ca		 or	 ecx, edx
  00050	c1 e9 08	 shr	 ecx, 8
  00053	8b d0		 mov	 edx, eax
  00055	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  0005b	c1 e0 10	 shl	 eax, 16			; 00000010H
  0005e	0b d0		 or	 edx, eax
  00060	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00063	c1 e2 08	 shl	 edx, 8
  00066	0b ca		 or	 ecx, edx
  00068	89 0f		 mov	 DWORD PTR [edi], ecx
  0006a	8b c8		 mov	 ecx, eax
  0006c	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00072	8b d0		 mov	 edx, eax
  00074	c1 ea 10	 shr	 edx, 16			; 00000010H
  00077	0b ca		 or	 ecx, edx
  00079	c1 e9 08	 shr	 ecx, 8
  0007c	8b d0		 mov	 edx, eax
  0007e	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00084	c1 e0 10	 shl	 eax, 16			; 00000010H
  00087	0b d0		 or	 edx, eax
  00089	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0008c	c1 e2 08	 shl	 edx, 8
  0008f	0b ca		 or	 ecx, edx
  00091	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  00094	8b c8		 mov	 ecx, eax
  00096	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  0009c	8b d0		 mov	 edx, eax
  0009e	c1 ea 10	 shr	 edx, 16			; 00000010H
  000a1	0b ca		 or	 ecx, edx
  000a3	c1 e9 08	 shr	 ecx, 8
  000a6	8b d0		 mov	 edx, eax
  000a8	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  000ae	c1 e0 10	 shl	 eax, 16			; 00000010H
  000b1	0b d0		 or	 edx, eax
  000b3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000b6	c1 e2 08	 shl	 edx, 8
  000b9	0b ca		 or	 ecx, edx
  000bb	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  000be	8b c8		 mov	 ecx, eax
  000c0	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  000c6	8b d0		 mov	 edx, eax
  000c8	c1 ea 10	 shr	 edx, 16			; 00000010H
  000cb	0b ca		 or	 ecx, edx
  000cd	8b d0		 mov	 edx, eax
  000cf	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  000d5	c1 e9 08	 shr	 ecx, 8
  000d8	c1 e0 10	 shl	 eax, 16			; 00000010H
  000db	0b d0		 or	 edx, eax
  000dd	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000e0	c1 e2 08	 shl	 edx, 8
  000e3	0b ca		 or	 ecx, edx
  000e5	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  000e8	8b c8		 mov	 ecx, eax
  000ea	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  000f0	8b d0		 mov	 edx, eax
  000f2	c1 ea 10	 shr	 edx, 16			; 00000010H
  000f5	0b ca		 or	 ecx, edx
  000f7	8b d0		 mov	 edx, eax
  000f9	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  000ff	c1 e0 10	 shl	 eax, 16			; 00000010H
  00102	0b d0		 or	 edx, eax
  00104	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00107	c1 e9 08	 shr	 ecx, 8
  0010a	c1 e2 08	 shl	 edx, 8
  0010d	0b ca		 or	 ecx, edx
  0010f	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00112	8b c8		 mov	 ecx, eax
  00114	8b d0		 mov	 edx, eax
  00116	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  0011c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0011f	0b ca		 or	 ecx, edx
  00121	8b d0		 mov	 edx, eax
  00123	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00129	c1 e9 08	 shr	 ecx, 8
  0012c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0012f	0b d0		 or	 edx, eax
  00131	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00134	c1 e2 08	 shl	 edx, 8
  00137	0b ca		 or	 ecx, edx
  00139	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  0013c	8b c8		 mov	 ecx, eax
  0013e	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00144	8b d0		 mov	 edx, eax
  00146	c1 ea 10	 shr	 edx, 16			; 00000010H
  00149	0b ca		 or	 ecx, edx
  0014b	8b d0		 mov	 edx, eax
  0014d	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00153	c1 e0 10	 shl	 eax, 16			; 00000010H
  00156	0b d0		 or	 edx, eax
  00158	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0015b	c1 e9 08	 shr	 ecx, 8
  0015e	c1 e2 08	 shl	 edx, 8
  00161	0b ca		 or	 ecx, edx
  00163	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
  00166	8b c8		 mov	 ecx, eax
  00168	8b d0		 mov	 edx, eax
  0016a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0016d	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  00173	0b ca		 or	 ecx, edx
  00175	8b d0		 mov	 edx, eax
  00177	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  0017d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00180	0b d0		 or	 edx, eax
  00182	c1 e9 08	 shr	 ecx, 8
  00185	c1 e2 08	 shl	 edx, 8
  00188	0b ca		 or	 ecx, edx
  0018a	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx

; 92   : 		i++;
; 93   : 	}
; 94   : 
; 95   : 	CEK.Set((char *)_CEK, cCE->szKey);

  0018d	8b 83 a4 00 00
	00		 mov	 eax, DWORD PTR [ebx+164]
  00193	50		 push	 eax
  00194	57		 push	 edi
  00195	8d 8d ec 05 00
	00		 lea	 ecx, DWORD PTR [ebp+1516]
  0019b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 96   : 	delete	_CEK;

  001a0	57		 push	 edi
  001a1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001a6	83 c4 04	 add	 esp, 4
  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi
  001ab	5d		 pop	 ebp
  001ac	5b		 pop	 ebx

; 97   : 
; 98   : }

  001ad	c2 04 00	 ret	 4
?Set_Encryption@PKCS7_6_Input@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; PKCS7_6_Input::Set_Encryption
PUBLIC	??1PKCS7_6_Input@@UAE@XZ			; PKCS7_6_Input::~PKCS7_6_Input
; Function compile flags: /Ogtpy
;	COMDAT ??1PKCS7_6_Input@@UAE@XZ
_TEXT	SEGMENT
??1PKCS7_6_Input@@UAE@XZ PROC				; PKCS7_6_Input::~PKCS7_6_Input, COMDAT
; _this$ = eax

; 25   : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax
  00003	8b 86 c4 fd ff
	ff		 mov	 eax, DWORD PTR [esi-572]
  00009	c7 86 f4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR [esi-1548], OFFSET ??_7PKCS7_6_Input@@6BPKCS7@@@
  00013	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00016	57		 push	 edi

; 26   : }

  00017	8d 7e 9c	 lea	 edi, DWORD PTR [esi-100]
  0001a	c7 84 31 c4 fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR [ecx+esi-572], OFFSET ??_7PKCS7_6_Input@@6BBER_Input@@@
  00025	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  0002b	83 7f 5c 10	 cmp	 DWORD PTR [edi+92], 16	; 00000010H
  0002f	72 0c		 jb	 SHORT $LN24@PKCS7_6_In
  00031	8b 57 48	 mov	 edx, DWORD PTR [edi+72]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN24@PKCS7_6_In:
  0003d	33 c0		 xor	 eax, eax
  0003f	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  00046	89 47 58	 mov	 DWORD PTR [edi+88], eax
  00049	88 47 48	 mov	 BYTE PTR [edi+72], al
  0004c	e8 00 00 00 00	 call	 ??1ASN1@@QAE@XZ		; ASN1::~ASN1
  00051	81 c6 1c fe ff
	ff		 add	 esi, -484		; fffffe1cH
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ??1EncryptedData@@QAE@XZ ; EncryptedData::~EncryptedData
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??1PKCS7_Input@@UAE@XZ	; PKCS7_Input::~PKCS7_Input
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	c3		 ret	 0
??1PKCS7_6_Input@@UAE@XZ ENDP				; PKCS7_6_Input::~PKCS7_6_Input
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_DPKCS7_6_Input@@QAEXXZ
_TEXT	SEGMENT
??_DPKCS7_6_Input@@QAEXXZ PROC				; PKCS7_6_Input::`vbase destructor', COMDAT
; _this$ = eax
  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax
  00003	81 c6 0c 06 00
	00		 add	 esi, 1548		; 0000060cH
  00009	8b c6		 mov	 eax, esi
  0000b	e8 00 00 00 00	 call	 ??1PKCS7_6_Input@@UAE@XZ ; PKCS7_6_Input::~PKCS7_6_Input
  00010	56		 push	 esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00017	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
??_DPKCS7_6_Input@@QAEXXZ ENDP				; PKCS7_6_Input::`vbase destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GPKCS7_6_Input@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPKCS7_6_Input@@UAEPAXI@Z PROC			; PKCS7_6_Input::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d b9 f4 f9 ff
	ff		 lea	 edi, DWORD PTR [ecx-1548]
  00008	8d b7 0c 06 00
	00		 lea	 esi, DWORD PTR [edi+1548]
  0000e	8b c6		 mov	 eax, esi
  00010	e8 00 00 00 00	 call	 ??1PKCS7_6_Input@@UAE@XZ ; PKCS7_6_Input::~PKCS7_6_Input
  00015	56		 push	 esi
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0001c	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00021	83 c4 04	 add	 esp, 4
  00024	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00029	74 09		 je	 SHORT $LN11@scalar@32
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN11@scalar@32:
  00034	8b c7		 mov	 eax, edi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	c2 04 00	 ret	 4
??_GPKCS7_6_Input@@UAEPAXI@Z ENDP			; PKCS7_6_Input::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0PKCS7_6_Input@@QAE@PBD@Z			; PKCS7_6_Input::PKCS7_6_Input
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0PKCS7_6_Input@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PKCS7_6_Input@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0PKCS7_6_Input@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0PKCS7_6_Input@@QAE@PBD@Z$2
__ehfuncinfo$??0PKCS7_6_Input@@QAE@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0PKCS7_6_Input@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File i:\渡部篤史\my project\cms\cms\asn1\pkcs7\pkcs7_6_input.cpp
xdata$x	ENDS
;	COMDAT ??0PKCS7_6_Input@@QAE@PBD@Z
_TEXT	SEGMENT
$T98778 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_strFileName$ = 12					; size = 4
??0PKCS7_6_Input@@QAE@PBD@Z PROC			; PKCS7_6_Input::PKCS7_6_Input, COMDAT

; 14   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0PKCS7_6_Input@@QAE@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b 74 24 28	 mov	 esi, DWORD PTR _this$[esp+32]
  0002a	33 db		 xor	 ebx, ebx
  0002c	89 5c 24 14	 mov	 DWORD PTR $T98778[esp+36], ebx
  00030	c7 86 d0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+976], OFFSET ??_8PKCS7_6_Input@@7B@
  0003a	c7 86 0c 06 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1548], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00044	8b 44 24 2c	 mov	 eax, DWORD PTR _strFileName$[esp+32]
  00048	50		 push	 eax
  00049	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  0004d	bf 01 00 00 00	 mov	 edi, 1
  00052	56		 push	 esi
  00053	89 7c 24 1c	 mov	 DWORD PTR $T98778[esp+44], edi
  00057	e8 00 00 00 00	 call	 ??0PKCS7_Input@@QAE@PBDQBD@Z ; PKCS7_Input::PKCS7_Input
  0005c	89 7c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], edi
  00060	8b 8e d0 03 00
	00		 mov	 ecx, DWORD PTR [esi+976]
  00066	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PKCS7_6_Input@@6BPKCS7@@@
  0006c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006f	8d 86 28 04 00
	00		 lea	 eax, DWORD PTR [esi+1064]
  00075	50		 push	 eax
  00076	c7 84 32 d0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+esi+976], OFFSET ??_7PKCS7_6_Input@@6BBER_Input@@@
  00081	e8 00 00 00 00	 call	 ??0EncryptedData@@QAE@QBD@Z ; EncryptedData::EncryptedData
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DHPBPBEA@Octet?5String?$AA@
  0008b	8d be a8 05 00
	00		 lea	 edi, DWORD PTR [esi+1448]
  00091	57		 push	 edi
  00092	c6 44 24 28 02	 mov	 BYTE PTR __$EHRec$[esp+52], 2
  00097	e8 00 00 00 00	 call	 ??0ASN1@@QAE@QBD@Z	; ASN1::ASN1
  0009c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7OctetString@@6B@
  000a2	c7 47 5c 0f 00
	00 00		 mov	 DWORD PTR [edi+92], 15	; 0000000fH
  000a9	89 5f 58	 mov	 DWORD PTR [edi+88], ebx
  000ac	88 5f 48	 mov	 BYTE PTR [edi+72], bl

; 15   : }

  000af	8b c6		 mov	 eax, esi
  000b1	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	83 c4 14	 add	 esp, 20			; 00000014H
  000c3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PKCS7_6_Input@@QAE@PBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T98778[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 12 00 00
	00		 je	 $LN5@PKCS7_6_In@2
  0000c	83 65 f0 fe	 and	 DWORD PTR $T98778[ebp], -2 ; fffffffeH
  00010	8b 4d 04	 mov	 ecx, DWORD PTR _this$[ebp-4]
  00013	81 c1 0c 06 00
	00		 add	 ecx, 1548		; 0000060cH
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@PKCS7_6_In@2:
  0001e	c3		 ret	 0
__unwindfunclet$??0PKCS7_6_Input@@QAE@PBD@Z$1:
  0001f	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00022	05 28 04 00 00	 add	 eax, 1064		; 00000428H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??1PKCS7_Input@@UAE@XZ	; PKCS7_Input::~PKCS7_Input
  0002d	c3		 ret	 0
__unwindfunclet$??0PKCS7_6_Input@@QAE@PBD@Z$2:
  0002e	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00031	05 28 04 00 00	 add	 eax, 1064		; 00000428H
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??1EncryptedData@@QAE@XZ ; EncryptedData::~EncryptedData
  0003c	c3		 ret	 0
__ehhandler$??0PKCS7_6_Input@@QAE@PBD@Z:
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00044	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PKCS7_6_Input@@QAE@PBD@Z
  00053	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PKCS7_6_Input@@QAE@PBD@Z ENDP			; PKCS7_6_Input::PKCS7_6_Input
PUBLIC	?decrypt@PKCS7_6_Input@@QAEXPAVFileOutput@@@Z	; PKCS7_6_Input::decrypt
; Function compile flags: /Ogtpy
;	COMDAT ?decrypt@PKCS7_6_Input@@QAEXPAVFileOutput@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_f_Plain$ = 12						; size = 4
?decrypt@PKCS7_6_Input@@QAEXPAVFileOutput@@@Z PROC	; PKCS7_6_Input::decrypt, COMDAT

; 111  : {

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _this$[esp]

; 112  : 	int	iResult;
; 113  : 
; 114  : 	//暗号文本体
; 115  : 	StreamPointerMove(ptEncryptedContent);

  00005	8b 83 08 06 00
	00		 mov	 eax, DWORD PTR [ebx+1544]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	6a 00		 push	 0
  0000f	8d bb d0 03 00
	00		 lea	 edi, DWORD PTR [ebx+976]
  00015	50		 push	 eax
  00016	8b f7		 mov	 esi, edi
  00018	e8 00 00 00 00	 call	 ?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@JH@Z ; std::basic_istream<char,std::char_traits<char> >::seekg

; 116  : 	iResult = encrypted_data.encryptedContentInfo.decrypt((unsigned char*)CEK.strValue.c_str(), this, f_Plain);

  0001d	83 bb 04 06 00
	00 10		 cmp	 DWORD PTR [ebx+1540], 16 ; 00000010H
  00024	72 08		 jb	 SHORT $LN12@decrypt@3
  00026	8b 93 f0 05 00
	00		 mov	 edx, DWORD PTR [ebx+1520]
  0002c	eb 06		 jmp	 SHORT $LN13@decrypt@3
$LN12@decrypt@3:
  0002e	8d 93 f0 05 00
	00		 lea	 edx, DWORD PTR [ebx+1520]
$LN13@decrypt@3:
  00034	8b 4c 24 14	 mov	 ecx, DWORD PTR _f_Plain$[esp+8]
  00038	51		 push	 ecx
  00039	8d b3 b4 04 00
	00		 lea	 esi, DWORD PTR [ebx+1204]
  0003f	e8 00 00 00 00	 call	 ?decrypt@EncryptedContentInfo@@QAEHPAEPAVFileInput@@PAVFileOutput@@@Z ; EncryptedContentInfo::decrypt

; 117  : 
; 118  : 	if(iResult != 0){

  00044	85 c0		 test	 eax, eax
  00046	74 0f		 je	 SHORT $LN1@decrypt@3

; 119  : 		errPrint("Decrypt",": Content-Encryption-Key may be different.");

  00048	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CL@KMDCDNLB@?3?5Content?9Encryption?9Key?5may?5be?5@
  0004d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07OKGDHKCM@Decrypt?$AA@
  00052	e8 00 00 00 00	 call	 ?errPrint@@YAXPBD0@Z	; errPrint
$LN15@decrypt@3:
$LN1@decrypt@3:

; 120  : 	}
; 121  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	c2 08 00	 ret	 8
$LN14@decrypt@3:
?decrypt@PKCS7_6_Input@@QAEXPAVFileOutput@@@Z ENDP	; PKCS7_6_Input::decrypt
PUBLIC	?Get_EncryptedData@PKCS7_6_Input@@QAEXXZ	; PKCS7_6_Input::Get_EncryptedData
; Function compile flags: /Ogtpy
;	COMDAT ?Get_EncryptedData@PKCS7_6_Input@@QAEXXZ
_TEXT	SEGMENT
?Get_EncryptedData@PKCS7_6_Input@@QAEXXZ PROC		; PKCS7_6_Input::Get_EncryptedData, COMDAT
; _this$ = esi

; 36   : {

  00000	51		 push	 ecx

; 37   : 	//ContentInfo
; 38   : 	read_ContentInfo(EncryptedData_type);

  00001	56		 push	 esi
  00002	b8 06 00 00 00	 mov	 eax, 6
  00007	e8 00 00 00 00	 call	 ?read_ContentInfo@PKCS7_Input@@QAEII@Z ; PKCS7_Input::read_ContentInfo

; 39   : 
; 40   : 	//EnvelopedData
; 41   : 	ptEncryptedContent = read_EncryptedData(&encrypted_data);

  0000c	8d 86 28 04 00
	00		 lea	 eax, DWORD PTR [esi+1064]
  00012	50		 push	 eax
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ?read_EncryptedData@PKCS7_Input@@QAEIPAVEncryptedData@@@Z ; PKCS7_Input::read_EncryptedData
  00019	89 86 08 06 00
	00		 mov	 DWORD PTR [esi+1544], eax
  0001f	59		 pop	 ecx

; 42   : }

  00020	c3		 ret	 0
?Get_EncryptedData@PKCS7_6_Input@@QAEXXZ ENDP		; PKCS7_6_Input::Get_EncryptedData
PUBLIC	?Set_Encryption@PKCS7_6_Input@@QAEXPAVPKCS8_Input@@@Z ; PKCS7_6_Input::Set_Encryption
; Function compile flags: /Ogtpy
;	COMDAT ?Set_Encryption@PKCS7_6_Input@@QAEXPAVPKCS8_Input@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_f_KEY$ = 12						; size = 4
?Set_Encryption@PKCS7_6_Input@@QAEXPAVPKCS8_Input@@@Z PROC ; PKCS7_6_Input::Set_Encryption, COMDAT

; 55   : {

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _this$[esp]
  00005	56		 push	 esi

; 56   : 	Encryption*			cCE		= encrypted_data.encryptedContentInfo.contentEncryptionAlgorithm;

  00006	8b b3 fc 04 00
	00		 mov	 esi, DWORD PTR [ebx+1276]

; 57   : 	unsigned	char*	_CEK	= new unsigned char [cCE->szKey];

  0000c	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  00012	57		 push	 edi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 58   : 
; 59   : 	//------------------
; 60   : 	//鍵取得
; 61   : 	f_KEY->Get_PrivateKey_with_check(cCE, _CEK, cCE->szKey);

  00019	8b 8e a4 00 00
	00		 mov	 ecx, DWORD PTR [esi+164]
  0001f	8b 54 24 18	 mov	 edx, DWORD PTR _f_KEY$[esp+12]
  00023	83 c4 04	 add	 esp, 4
  00026	51		 push	 ecx
  00027	8b f8		 mov	 edi, eax
  00029	57		 push	 edi
  0002a	56		 push	 esi
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?Get_PrivateKey_with_check@PKCS8_Input@@QAEXPAVAlgorithmIdentifier@@PAEI@Z ; PKCS8_Input::Get_PrivateKey_with_check

; 62   : 	CEK.Set((char *)_CEK, cCE->szKey);

  00031	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  00037	50		 push	 eax
  00038	57		 push	 edi
  00039	8d 8b ec 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1516]
  0003f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 63   : 	delete	_CEK;

  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004a	83 c4 04	 add	 esp, 4

; 64   : 
; 65   : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	c2 08 00	 ret	 8
?Set_Encryption@PKCS7_6_Input@@QAEXPAVPKCS8_Input@@@Z ENDP ; PKCS7_6_Input::Set_Encryption
END
