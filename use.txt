================================================================

	AES暗号・復号処理ソフトウェア	使用方法

================================================================

本ドキュメントは、TAB=8 で記述されます。



１．特徴
━━━━━━━━━━━━
(1) SSE2(SIMD)命令を用いて、高速に暗号・復号処理を行います。
　　（※SIMD化されているのは、AES暗号・復号の処理ルーチンのみです。）


(2) 暗号鍵は、以下から選択できます。
　　・パスワード文字列（SHA-256 ハッシュ値したものが暗号鍵となります）。
　　・暗号鍵ファイル（AES暗号用の鍵が格納されたPKCS#8ファイル）。
　　・擬似乱数により自動生成（オプションスイッチで暗号鍵長を指定可能です）。


(3) 暗号の安全性を高めています。
　　・初期化ベクタ(IV)は、毎回、擬似乱数により生成し、その為、
　　　同じ暗号鍵を使用しても、毎回、異なる暗号文が生成されます。
　　・暗号鍵及びIVは、擬似乱数(Mersenne Twister)の出力を、
　　　更にハッシュ化(SHA-256)した値を使用し、推定し難い値となります。


(4) 暗号文、暗号鍵の各ファイルはRFC勧告に従った標準形式で出力します。
　　（※拡張子は標準化されていない為、独自拡張子です。）
　　【暗号文ファイル（*.p7）】
	PKCS#7 Cryptographic Message Syntax (CMS)
	※暗号化データ(Encrypted-data)タイプを出力します。
　　【暗号鍵ファイル（*.key）】
	PKCS#8 Public-Key Cryptography Standards
	Private-Key Information Syntax Specification Version 1.2
	※対称鍵における秘密鍵用の規格ですが、共通鍵を格納しています。


(5) アセンブリ言語・Ｃ言語によるソースファイル及び、
　　Visual C++.net 2008 Express Editionのプロジェクトファイル付属。

　　尚、本クラスや、ソースコードの流用をする際は、ご一報ください。
　　又、本クラスや、ソースコードの利用により発生したいかなる損害に
　　つきましては法律が許容する最大限において責任を負いませんので、
　　使用者の責任の元、ご利用頂ければ幸いです。

　　"NIST Special Publication 800-38A"のテストベクターにより、
　　AES-CBCモードにおける暗号・復号結果のテストを実施済みです。





２．暗号の方法
━━━━━━━━━━━━

(1) AES-256の暗号鍵を、疑似乱数で自動生成する場合
────────────────────────────
AES [filename.ext] /E

とコマンドラインに打ち込む事で、以下、２つのファイルを生成します。
デフォルトは、AES-CBC 256bit用の鍵を生成します。
　filename.ext.p7	…　暗号文ファイル（PKCS#7形式）
　filename.ext.key	…　暗号鍵ファイル（PKCS#8形式）

ファイル名及び拡張子名はチェックしないので、自由に変えてしまって構いません。
尚、暗号ファイル中にファイル名情報は含まないので、ファイル名・拡張子名を
変えた場合は、配信先に、ファイル名・拡張子名を知らせる必要があります。

また、オプションスイッチ /M[n] により、暗号利用モードを選択できます。
現在は、以下の３つのみ対応しています。
	 2　…	AES-CBC 128bit
	22　…	AES-CBC 192bit
	42　…	AES-CBC 256bit



(2) 暗号鍵のファイルを、別途指定する場合。
────────────────────────────
AES [filename.ext] /E /Fk[key-filename]

とコマンドラインに打ち込む事で、以下のファイルを生成します。
暗号鍵は、[key-filename]を使用します。
　filename.ext.p7	…　暗号文ファイル（PKCS#7形式）



(3) 暗号鍵を文字列で指定する場合。
────────────────────────────
AES [filename.ext] /E /W[strings]

とコマンドラインに打ち込む事で、以下のファイルを生成します。
暗号鍵は、[strings]をSHA-256ハッシュ値化した数値となります。
尚、暗号鍵に使用する文字列は、256bit相当の情報量がある方が良いかと思います。
　filename.ext.p7	…　暗号文ファイル（PKCS#7形式）

暗号文のファイルを指定する場合は、オプションスイッチ"/Fc[aes-filename]"を記述して下さい。





３．復号の方法
━━━━━━━━━━━━

(1) 暗号鍵のファイルがある場合。
────────────────────────────
AES [filename.ext]

とコマンドラインに打ち込む事で、以下２つのファイルを用いて復号します。
※ファイル名は、復号後のファイル名を入力します。
　filename.ext.p7	…　暗号文ファイル（PKCS#7形式）
　filename.ext.key	…　暗号鍵ファイル（PKCS#8形式）

暗号鍵のファイルを別指定する場合は、オプションスイッチ"/Fk[key-filename]"を記述して下さい。
暗号文のファイルを別指定する場合は、オプションスイッチ"/Fc[aes-filename]"を記述して下さい。



(2) 暗号鍵を文字列で指定する場合。
────────────────────────────
AES [filename.ext] /W[strings]

とコマンドラインに打ち込む事で、以下のファイルを用いて復号します。
暗号鍵は、[strings]をSHA-256ハッシュ値化した数値となります。
　filename.ext.p7	…　暗号文





４．技術資料
━━━━━━━━━━━━
(1) アルゴリズム
────────────────────────────
暗号アルゴリズムは、ＡＥＳ暗号（アメリカ合衆国政府の公認暗号）、
暗号利用モードは、ＣＢＣ（連鎖モード）で、暗号・復号処理を行います。
※AES暗号については、別途、"fips Pub 197 (AES)"を参照願います。

ハッシュ関数は、"SHA-256"を使用しています。
※SHA-256ハッシュ関数については、別途、"fips Pub 180-3 (SHS)"を参照願います。

擬似乱数は、"Mersenne Twister"を使用しています。
Mersenne Twisterについては、別途、以下URLを参照願います。
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html



(2) ファイル・フォーマット
────────────────────────────
暗号文ファイル(*.p7)及び、暗号鍵ファイル(*.key)共に、
ASN.1 (Abstract Syntax Notation One) によって定義されており、
DER (Distinguished Encoding Rules) 符号化されたデータとなります。
DER符号化されたデータ以外は、対応しておりません。
ASN.1についての詳細は、別途、"ITU-T X.680 (ASN.1)"、
DER符号化についての詳細は、別途、"ITU-T X.690"を参照願います。

【暗号文ファイル（*.p7）】
PKCS#7 Cryptographic Message Syntax (CMS)
※暗号化データ(Encrypted-data)タイプを出力します。
PKCS#7(CMS)の詳細は、別途、"RFC.5652 (CMS)"を参照願います。
CMSでのAES暗号の使用法詳細は、別途、"RFC.3565 (CMS with AES)"を参照願います。

【暗号鍵ファイル（*.key）】
PKCS#8 Private-Key Information Syntax Specification Version 1.2
※対称鍵における秘密鍵用の規格ですが、共通鍵を格納しています。
PKCS#8の詳細は、別途、"RFC.5208 (PKCS#8)"を参照願います。

<<備考>>
PKCS#7(CMS)は、標準暗号メッセージ構文ではありますが、
このカテゴリーの中に、署名化データ（Signed-data）タイプのデータがあり、
これは、「電子署名(*.p7s)」や「電子証明書（*.p7c）」と呼ばれるデータです。
こちらのタイプは拡張子が決まっているのですが、
暗号化データ（Encypted-data）タイプについては拡張子は決まっていないようです。



(3) 概略ブロック図
────────────────────────────
name	…　クラス名　等々
├◇	…　クラスの集約／包含(has-a)
└←	…　クラスの継承／派生(is-a)　（←の元が基底クラス）



aes.exe
├◇MT				…　擬似乱数を生成するクラス
├◇SHA-256			…　ハッシュ値を求めるクラス
｜　├←SHA
｜　└←AlgorithmIdentifier
├◇AES				…　暗号・復号を行うクラス
｜　｜◇OctetString
｜　└←AlgorithmIdentifier
├◇PKCS7			…　暗号文(*.p7)を構成するクラス
｜　├←ContentInfo
｜　｜　｜◇ObjectIdentifier
｜　｜　｜◇Context
｜　｜　｜　└◇EncryptedData
｜　｜　｜　　　｜◇Integer
｜　｜　｜　　　｜◇EncryptedContentInfo
｜　｜　｜　　　｜　｜◇ObjectIdentifier
｜　｜　｜　　　｜　｜◇AlgorithmIdentifier
｜　｜　｜　　　｜　｜◇Context
｜　｜　｜　　　｜　└←Sequence
｜　｜　｜　　　└←Sequence
｜　｜　└←Sequence
｜　└←fstream
└◇PKCS8			…　暗号鍵(*.key)を構成するクラス
　　├←PrivateKeyInfo
　　｜　｜◇Integer
　　｜　｜◇AlgorithmIdentifier
　　｜　｜◇OctetString
　　｜　└←Sequence
　　└←fstream

AlgorithmIdentifier		…　アルゴリズムを示すクラス
　｜◇ObjectIdentifier
　└←Sequence

Integer				…　ASN.1における整数値を示すクラス
　└←ASN1

OctetString			…　ASN.1における8bitデータ列を示すクラス
　└←ASN1

ObjectIdentifier		…　ASN.1における識別値(OID)を示すクラス
　└←ASN1

Sequence			…　ASN.1における連続データを示すクラス
　└←ASN1

Context				…　ASN.1におけるコンテンツをを示すクラス
　└←ASN1





５．著作権
━━━━━━━━━━━━

Copyright (c) A.Watanabe (2011), All Rights Reserved

●連絡先
・E-mail	sha_w@nifty.com
・URL		http://homepage1.nifty.com/~sha_w/
・mixi		http://mixi.jp/show_profile.pl?id=16558



●ＡＥＳ
────────
Joan Daemen博士, Vincent Rijmen博士


●ＳＨＡ
────────
アメリカ国家安全保障局（NSA）


●Mersenne Twister
────────
Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura, All rights reserved.
松本眞教授　西村拓士助手


   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)  
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.                          

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote 
        products derived from this software without specific prior written 
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)

